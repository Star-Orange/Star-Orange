<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>md命令</title>
      <link href="/post/5c2fafc7.html"/>
      <url>/post/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><u>文本内容</u><emp>文本内容</emp><wavy>文本内容</wavy><del>文本内容</del><kbd>文本内容</kbd><psw>文本内容</psw><details class="folding-tag" ><summary> 测试 </summary>              <div class='content'>              <div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
          <category> 其他笔记 </category>
          
          <category> 前端笔记 </category>
          
          <category> SQL笔记 </category>
          
          <category> 工具笔记 </category>
          
          <category> 算法笔记 </category>
          
          <category> 计算机笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型设计模式</title>
      <link href="/post/1e857e9f.html"/>
      <url>/post/1e857e9f.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://www.staro.cc/post/designModeTotality.html">设计模式总览入口</a></li></ul></blockquote><h2 id="原型设计模式"><a href="#原型设计模式" class="headerlink" title="原型设计模式"></a>原型设计模式</h2><blockquote><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式之一。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p></blockquote><p>从上可知原型设计模式的作用：创建重复对象，调用者不需要知道任何创建的细节，不调用构造函数</p><h2 id="原型模式包含如下角色："><a href="#原型模式包含如下角色：" class="headerlink" title="原型模式包含如下角色："></a>原型模式包含如下角色：</h2><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><h2 id="实现Cloneable接口进行创建"><a href="#实现Cloneable接口进行创建" class="headerlink" title="实现Cloneable接口进行创建"></a>实现Cloneable接口进行创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> (Student)stu1.clone();</span><br><span class="line">        stu2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        System.out.println(stu1);<span class="comment">// Student(name=张三, sex=男, age=18)</span></span><br><span class="line">        System.out.println(stu2);<span class="comment">// Student(name=李四, sex=男, age=18)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，把一个学生复制过来，只是改了姓名而已，其他属性完全一样没有改变，需要注意的是，一定要在被拷贝的对象上实现Cloneable接口，否则会抛出CloneNotSupportedException异常。</p><h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><p>浅克隆就是如果类里面有地址引用的属性，当我们进行<code>clone</code>时，对于引用类型，他依旧会指向同一个地址，当我们修改时两个类中的引用类型的属性会同时改变。</p><p>创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><p>如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line">        clazz1.setName(<span class="string">&quot;高三一班&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        clazz1.setStudent(stu1);</span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=张三, sex=男, age=18))</span></span><br><span class="line">        <span class="comment">// 进行克隆</span></span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz2</span> <span class="operator">=</span> (Clazz)clazz1.clone();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> clazz2.getStudent();</span><br><span class="line">        stu2.setName(<span class="string">&quot;李四&quot;</span>);<span class="comment">// 这里修改的是stu2</span></span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=李四, sex=男, age=18))</span></span><br><span class="line">        System.out.println(clazz2); <span class="comment">// Clazz(name=高三一班, student=Student(name=李四, sex=男, age=18))</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上代码的执行过程中我们可以看出，<code>stu1==stu2</code>这就是浅拷贝的弊端，非基础类型会进行地址的指向，而我们想要的是哪怕是引用类型也是相互独立的互不影响，这就是<code>深拷贝</code></p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Clazz</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Student student;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">        oos.writeObject(<span class="built_in">this</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bis);</span><br><span class="line">        <span class="keyword">return</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Clazz</span>();</span><br><span class="line">        clazz1.setName(<span class="string">&quot;高三一班&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        clazz1.setStudent(stu1);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Clazz</span> <span class="variable">clazz2</span> <span class="operator">=</span> (Clazz)clazz1.deepClone();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu2</span> <span class="operator">=</span> clazz2.getStudent();</span><br><span class="line">        stu2.setName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(clazz1); <span class="comment">// Clazz(name=高三一班, student=Student(name=张三, sex=男, age=18))</span></span><br><span class="line">        System.out.println(clazz2); <span class="comment">// Clazz(name=高三一班, student=Student(name=王五, sex=男, age=18))</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>具体步骤如下：</p><ol><li>创建一个<code>ByteArrayOutputStream</code>对象<code>bos</code>，用于存储序列化后的对象数据。</li><li>创建一个<code>ObjectOutputStream</code>对象<code>oos</code>，并将<code>bos</code>作为参数传递给它。<code>ObjectOutputStream</code>用于将对象写入到字节流中。</li><li>调用<code>oos.writeObject(this)</code>将当前对象（<code>this</code>）写入到字节流中。这样，对象的数据就被序列化了。</li><li>创建一个<code>ByteArrayInputStream</code>对象<code>bis</code>，并将<code>bos.toByteArray()</code>作为参数传递给它。<code>ByteArrayInputStream</code>用于从字节数组中读取数据。</li><li>创建一个<code>ObjectInputStream</code>对象<code>ois</code>，并将<code>bis</code>作为参数传递给它。<code>ObjectInputStream</code>用于从字节流中读取对象。</li><li>调用<code>ois.readObject()</code>从字节流中读取对象，并将其返回。这样就完成了当前对象的深拷贝。</li></ol><p>需要注意的是，这个方法使用了序列化和反序列化的方式来实现深拷贝。这意味着被拷贝的对象必须实现<code>Serializable</code>接口，并且其所有成员变量也必须是可序列化的。如果对象的成员变量包含不可序列化的对象，那么需要进行额外的处理才能实现深拷贝。</p></blockquote><p>可以看到，当修改了<code>stu2</code>的姓名时，<code>stu1</code>的姓名并没有被修改了，这说明<code>stu2</code>和<code>stu1</code>已经是不同的对象了，说明<code>Clazz</code>中的<code>Student</code>也被克隆了，不再指向原有对象地址，这就是深克隆。这里需要注意的是，<code>Clazz</code>类和<code>Student</code>类都需要实现<code>Serializable</code>接口，否则会抛出<code>NotSerializableException</code>异常。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>适用场景：</p><ul><li>类初始化消耗资源较多。</li><li>new产生的一个对象需要非常繁琐的过程（数据准备、访问权限等）。</li><li>构造函数比较复杂。</li><li>循环体中生产大量对象时。</li></ul><p>优点：</p><ul><li>性能优良，Java自带的原型模式是基于内存二进制流的拷贝，比直接new一个对象性能上提升了许多。</li><li>可以使用深克隆方式保存对象的状态，使用原型模式将对象复制一份并将其状态保存起来，简化了创建的过程。</li></ul><p>缺点：</p><ul><li>必须配备克隆（或者可拷贝）方法。</li><li>当对已有类进行改造的时候，需要修改代码，违反了开闭原则。</li><li>深克隆、浅克隆需要运用得当。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode移动盘符位置</title>
      <link href="/post/3903b0af.html"/>
      <url>/post/3903b0af.html</url>
      
        <content type="html"><![CDATA[<p>很简单，总体分为三步 <code>剪切-&gt; 存放 -&gt; 上命令</code></p><p>当你会了这种方法，当你想移动其他的应用时，也是一模一样的。</p><h2 id="操作-vscode-插件下载存放地方"><a href="#操作-vscode-插件下载存放地方" class="headerlink" title="操作.vscode (插件下载存放地方)"></a>操作.vscode (插件下载存放地方)</h2><ul><li>第一步：找到<code>.vscode</code> 一般存放位置为<code>C:\Users\&#123;系统用户名&#125;</code>下,找到进行剪切<code>.vscode</code></li><li>第二步:找到需要存放的位置<code>ctrl+v</code>进行粘贴以我的为例<code>G:\VsCode\</code>我粘贴在该文件夹下</li><li>第三步:管理员身份运行cmd执行命令<code>mklink /D &quot;C:\Users\&#123;系统用户名&#125;\.vscode&quot; &quot;G:\VsCode\.vscode&quot;</code></li></ul><p>提示 : …. 创建的符号链接表示成功</p><h2 id="操作-Microsoft-VS-Code-应用程序存放地方"><a href="#操作-Microsoft-VS-Code-应用程序存放地方" class="headerlink" title="操作 Microsoft VS Code (应用程序存放地方)"></a>操作 Microsoft VS Code (应用程序存放地方)</h2><blockquote><p>和操作.vscode一模一样<br>路径的存放位置可能是<code>C:\Users\&#123;系统用户名&#125;\AppData\Local\Programs\</code>路径下(我的就是这个路径下)，具体在安装的时候可以看出。思路依旧是一样的。</p><ul><li>第一步：找到<code>Microsoft VS Code</code> 一般存放位置为<code>C:\Program Files (x86)</code>下,找到进行剪切<code>Microsoft VS Code</code></li><li>第二步:找到需要存放的位置<code>ctrl+v</code>进行粘贴以我的为例<code>G:\VsCode\</code>我粘贴在该文件夹下</li><li>第三步:管理员身份运行cmd执行命令<code>mklink /D &quot;C:\Program Files (x86)\Microsoft VS Code&quot; &quot;G:\VsCode\Microsoft VS Code&quot;</code><br>提示 : …. 创建的符号链接表示成功</li></ul><p>参考文章</p><ul><li><a href="https://www.jianshu.com/p/030f44855daf">mklink是使用</a></li><li><a href="https://blog.csdn.net/qq_33593432/article/details/123957913">Visual Studio Code 安装到其它盘，其它程序类似操作</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-工厂模式</title>
      <link href="/post/factoryDesignMode.html"/>
      <url>/post/factoryDesignMode.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://www.staro.cc/post/designModeTotality.html">设计模式总览入口</a></li></ul></blockquote><h2 id="工厂设计模式（Factory-Method）"><a href="#工厂设计模式（Factory-Method）" class="headerlink" title="工厂设计模式（Factory Method）"></a>工厂设计模式（Factory Method）</h2><blockquote><p>创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p><p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。</p><p>创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p><p>工厂模式是创建型模式中比较重要的。工厂模式的主要功能就是帮助我们实例化对象。之所以名字中包含工厂模式四个字，是因为对象的实例化过程是通过工厂实现的，是用工厂代替 new 操作的。</p></blockquote><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂模式不是<a href="https://so.csdn.net/so/search?q=23种设计模式&amp;spm=1001.2101.3001.7020">23种设计模式</a>之一，他可以理解为工厂模式的一种简单的特殊实现。</p><p>一般适用于需要管理的类比较少</p><h3 id="基础版本："><a href="#基础版本：" class="headerlink" title="基础版本："></a>基础版本：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 衣服工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClothesBasicFacroty</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Clothes <span class="title function_">instance</span><span class="params">(String type)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;dress&quot;</span>:<span class="comment">// 连衣裙</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dress</span>();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;shirt&quot;</span>:<span class="comment">// 衬衫</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Shirt</span>();</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;cotta&quot;</span>:<span class="comment">// 短袖</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cotta</span>();</span><br><span class="line">             <span class="keyword">break</span>;  </span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 产品具体类，实现产品基类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dress</span> <span class="keyword">implements</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基础版本是最基础的简单工厂写法，传递一个字符串参数，根据字符串参数去匹配需要创建的对象并返回出去。但是由于是字符串如果写错那么就获取不到自己想要的类型实例，解决办法可以定义一个枚举来实现，也可以用下面这种升级版本，还有一个缺点就是如果我们需要增加一个新的产品类那么就需要在再switch中进行添加，不利于扩展。</p><h3 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 衣服工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClothesBasicFacroty</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Clothes <span class="title function_">instance</span><span class="params">(Class&lt;? extends Clothes&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(clazz!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.newInstance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>升级版本解决了基础版本的字符串硬编码的问题，同时在新增产品类时，也不需要进行再进行判断。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>适用场景：</p><ul><li>工厂类负责创建的对象较少。</li><li>客户端只需要传入工厂类的参数，对于如何创建的对象的逻辑不需要关心。</li></ul><p>优点：</p><ul><li>只需要传入一个正确的参数，就可以获取你所需要的对象，无须知道创建的细节。</li></ul><p>缺点：</p><ul><li>工厂类的职责相对过重，增加新的产品类型的时需要修改工厂类的判断逻辑，违背了开闭原则。</li><li>不易于扩展过于复杂的产品结构。</li></ul><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂方法模式是指定义一个创建对象的接口，让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行。</p><p>工厂方法模式主要有以下几种角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它和具体工厂之间一一对应。</li></ul><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><p>步骤：创建抽象产品—&gt;创建具体产品—&gt;创建一个抽象工厂(定义工厂返回方法)—&gt;创建一个具体工厂(实现工厂抽象接口)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品基类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 产品具体类，实现产品基类接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dress</span> <span class="keyword">implements</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shirt</span> <span class="keyword">implements</span> <span class="title class_">Clothes</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义抽象接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClothersFactory</span>()&#123;</span><br><span class="line">    Clothers <span class="title function_">instance</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义抽象接口实现 连衣裙工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DressFactory</span>() <span class="keyword">implements</span> <span class="title class_">ClothersFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Clothers <span class="title function_">instance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dress</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义抽象接口实现 短袖工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShirtFactory</span>() <span class="keyword">implements</span> <span class="title class_">ClothersFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Clothers <span class="title function_">instance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Shirt</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">ClothersFactory</span> <span class="variable">dressFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DressFactory</span>();</span><br><span class="line">        <span class="type">Dress</span> <span class="variable">dress</span> <span class="operator">=</span> dressFactory.instance();</span><br><span class="line">        </span><br><span class="line">        <span class="type">ClothersFactory</span> <span class="variable">shirtFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShirtFactory</span>();</span><br><span class="line">        <span class="type">Shirt</span> <span class="variable">shirt</span> <span class="operator">=</span> shirtFactory.instance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>适用场景：</p><ul><li>创建对象需要大量的重复代码。</li><li>客户端（应用层）不依赖于产品类实例如何被创建和实现等细节。</li><li>一个类通过其子类来指定创建哪个对象。</li></ul><p>优点：</p><ul><li>用户只需要关系所需产品对应的工厂，无须关心创建细节。</li><li>加入新产品符合开闭原则，提高了系统的可扩展性。</li></ul><p>缺点：</p><ul><li>类的数量容易过多，增加了代码结构的复杂度。</li><li>增加了系统的抽象性和理解难度。</li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><p>所实话自我感觉还说很繁琐的，我们可以把获取产品的，在进行封装产品(代码并不严谨)但是大致思路应该是这个思路，和简单工厂的升级版差不多，或者根据配置文件获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetClothes</span>()&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Clothes <span class="title function_">instance</span><span class="params">(Class&lt;? extends ClothersFactory&gt; clazz)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(clazz!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.newInstance().instance();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h2><p>我们从工厂模式知道了他的局限性，那就是一个工厂只能做一个产品或者只能创建一个产品类，如果长久扩展下去，那么肯定就会有很多的工厂，大量消耗系统开销</p><p>抽象工厂则是我们可以把一些相关的产品做成一个<code>产品族</code>,由同一个工厂来生产，这就是抽象工厂的核心思想。</p><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 餐厅店 抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CanteenFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 点心(小吃)类</span></span><br><span class="line">    Snack <span class="title function_">createSnack</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 酒类</span></span><br><span class="line">    Alcohol <span class="title function_">createAlcohol</span> <span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 西餐风格工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">westernFoodFactory</span> <span class="keyword">implements</span> <span class="title class_">CanteenFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Snack <span class="title function_">createSnack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tiramisu</span>();<span class="comment">//蛋糕</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Alcohol <span class="title function_">createAlcohol</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedWine</span>();<span class="comment">//红酒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 中餐风格工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChineseFoodFactory</span> <span class="keyword">implements</span> <span class="title class_">CanteenFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Snack <span class="title function_">createSnack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Peanut</span>(); <span class="comment">// 花生</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Alcohol <span class="title function_">createAlcohol</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WhiteSpirit</span>(); <span class="comment">//白酒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>产品族：一系列相关的产品，整合到一起有关联性</p><p>产品等级：同一个继承体系</p><p>适用场景：</p><ul><li>客户端（应用层）不依赖于产品类实例如何被创建和实现等细节。</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量重复的代码。</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul><p>优点：</p><ul><li>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</li></ul><p>缺点：</p><ul><li>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式总览</title>
      <link href="/post/designModeTotality.html"/>
      <url>/post/designModeTotality.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><blockquote><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li><a href="https://www.staro.cc/post/designModeSingle.html">单例设计模式</a> 独一无二的类</li><li><a href="https://www.staro.cc/post/factoryDesignMode.html">工厂设计模式</a> 方法调用创建指定类</li><li><a href="https://www.staro.cc/post/factoryDesignMode.html">原型设计模式</a> 拷贝类</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><blockquote><p>这些模式关注对象之间的组合和关系，旨在解决如何构建灵活且可复用的类和对象结构。</p></blockquote><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><blockquote><p>这些模式关注对象之间的通信和交互，旨在解决对象之间的责任分配和算法的封装。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git提交(Push)超时问题解决</title>
      <link href="/post/gitPushQuestion.html"/>
      <url>/post/gitPushQuestion.html</url>
      
        <content type="html"><![CDATA[<p>在之前进行<code>git push origin main</code>的时候总是报连接超时问题，我觉得应该是网的问题，多提交几遍就可以了，直到今天，实在是忍受不了了。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/name/RepositoryName.git/&#x27;</span>: Failed to connect to github.com port 443 after 21041 ms: Timed out</span><br></pre></td></tr></table></figure></p><p>在网上找了些解决方案，直接上结果：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先取消设置</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line"><span class="comment"># http 端口号是可以自己更改的，要选择不被占用的端口号</span></span><br><span class="line">git config --global http.proxy <span class="string">&quot;http://127.0.0.1:9050&quot;</span></span><br><span class="line">git config --global https.proxy <span class="string">&quot;http://127.0.0.1:9050&quot;</span></span><br><span class="line"><span class="comment"># socks5</span></span><br><span class="line">git config --global http.proxy <span class="string">&quot;socks5://127.0.0.1:1080&quot;</span></span><br><span class="line">git config --global https.proxy <span class="string">&quot;socks5://127.0.0.1:1080&quot;</span></span><br></pre></td></tr></table></figure><br>就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/post/designModeSingle.html"/>
      <url>/post/designModeSingle.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li><a href="https://www.staro.cc/post/designModeTotality.html">设计模式总览入口</a></li></ul></blockquote><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="什么是单例模式"><a href="#什么是单例模式" class="headerlink" title="什么是单例模式"></a>什么是单例模式</h2><p>单例模式就是在全局只有一个实例。</p><h2 id="写法介绍"><a href="#写法介绍" class="headerlink" title="写法介绍"></a>写法介绍</h2><p>单例模式分为：懒汉式、饿汉式</p><p>饿汉式(hungry):在启动项目的时候就创建实例，而不是在调用的时候加载实例（线程安全、空间换时间、造成一定的性能浪费）</p><p>懒汉式(Lazy)：在调用的时候在进行实例化，线程不安全、时间换空间</p><h2 id="饿汉式写法"><a href="#饿汉式写法" class="headerlink" title="饿汉式写法"></a>饿汉式写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Hungry</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hungru</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：线程安全</p><p>缺点：资源浪费</p><h1 id="懒汉汉式写法"><a href="#懒汉汉式写法" class="headerlink" title="懒汉汉式写法"></a>懒汉汉式写法</h1><h2 id="1、基础版本"><a href="#1、基础版本" class="headerlink" title="1、基础版本"></a>1、基础版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lazy</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：节省空间，用到的时候在去创建实例对象</p><p>缺点：线程不安全</p><h2 id="2、同步锁版本"><a href="#2、同步锁版本" class="headerlink" title="2、同步锁版本"></a>2、同步锁版本</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lazy</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：线程安全</p><p>缺点：不管是不是已经初始化成功都需要同步访问方法，有严重的性能问题</p><h2 id="3、双重检测锁"><a href="#3、双重检测锁" class="headerlink" title="3、双重检测锁"></a>3、双重检测锁</h2><ul><li>单检测锁</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lazy</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            synchronize(Lzay.class)&#123;</span><br><span class="line">                 instance = <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>这是对上一种方式的优化，但是他有一个问题，就是当两个线程进入<code>if</code>中还是会造成多实例化的问题，进行优化的话就是在进行一次<code>if</code>判断</p></li><li><p>双检测锁</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lazy</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">            synchronize(Lzay.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>)&#123;</span><br><span class="line">                     instance = <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：优化了同步版本的严重性能消耗</p><h2 id="4、静态内部类创建"><a href="#4、静态内部类创建" class="headerlink" title="4、静态内部类创建"></a>4、静态内部类创建</h2><p>静态内部类也称作Singleton Holder, 也就是单持有者模式, 是线程安全的, 也是懒惰模式的变形.</p><p>JVM加载类的时候, 有这么几个步骤:</p><blockquote><p>①加载 -&gt; ②验证 -&gt; ③准备 -&gt; ④解析 -&gt; ⑤初始化</p></blockquote><p>需要注意的是: <strong>JVM在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类(SingletonHolder)的属性/方法被调用时才会被加载, 并初始化其静态属性(instance)</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> InLazy.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InLazy</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Lazy</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在初始化过程并不会加载内部类，所以当调用的时候才会加载内部类。</li><li>没有加锁、线程安全、用时在加载，并发高。 </li></ul><h2 id="5、容器式单例"><a href="#5、容器式单例" class="headerlink" title="5、容器式单例"></a>5、容器式单例</h2><ul><li>当单例很多的时候需要容器来管理单例，这个时候就可以用Map中线程安全的<code>`ConcurrentHashMap</code>来进行容器单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; singletonMap  = <span class="keyword">new</span> <span class="title class_">ConcurrnHashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getInStance</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> clazz.getName();</span><br><span class="line">         <span class="comment">// 当容器中不存在目标对象时则先生成对象再返回该对象</span></span><br><span class="line">        <span class="keyword">if</span> (!singletonMap.containsKey(className)) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> Class.forName(className).newInstance();</span><br><span class="line">            singletonMap.put(className, instance);</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 否则就直接返回容器里的对象</span></span><br><span class="line">        <span class="keyword">return</span> singletonMap.get(className);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">SafetyDangerLibrary</span> <span class="variable">instance1</span> <span class="operator">=</span> (SafetyDangerLibrary)ContainerSingleton.getInstance(SafetyDangerLibrary.class);</span><br><span class="line">        <span class="type">SafetyDangerLibrary</span> <span class="variable">instance2</span> <span class="operator">=</span> (SafetyDangerLibrary)ContainerSingleton.getInstance(SafetyDangerLibrary.class);</span><br><span class="line">        System.out.println(instance1 == instance2); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、ThreadLocal单例"><a href="#6、ThreadLocal单例" class="headerlink" title="6、ThreadLocal单例"></a>6、ThreadLocal单例</h2><p>不保证整个应用全局唯一，但保证线程内部全局唯一，以空间换时间，且线程安全。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ThreadLocalSingleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ThreadLocalSingleton&gt; threadLocalInstance = ThreadLocal.withInitial(() -&gt; <span class="keyword">new</span> <span class="title class_">ThreadLocalSingleton</span>());</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocalSingleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocalInstance.get();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;-----&quot;</span> + ThreadLocalSingleton.getInstance());</span><br><span class="line">        &#125;).start();</span><br><span class="line"><span class="comment">//        Thread-0-----com.ruoyi.library.domain.vo.ThreadLocalSingleton@53ac93b3</span></span><br><span class="line"><span class="comment">//        Thread-1-----com.ruoyi.library.domain.vo.ThreadLocalSingleton@7fe11afc</span></span><br><span class="line"><span class="comment">//        Thread-0-----com.ruoyi.library.domain.vo.ThreadLocalSingleton@53ac93b3</span></span><br><span class="line"><span class="comment">//        Thread-1-----com.ruoyi.library.domain.vo.ThreadLocalSingleton@7fe11afc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><p><a href="https://www.cnblogs.com/shoufeng/p/10820964.html">设计模式 - Java中单例模式的6种写法及优缺点对比 </a></p></li><li><p><a href="https://blog.csdn.net/pyy542718473/article/details/127248128">Java中23种设计模式</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SaToken与SpringBoot的整合</title>
      <link href="/post/SpringBootMergeSaToken.html"/>
      <url>/post/SpringBootMergeSaToken.html</url>
      
        <content type="html"><![CDATA[<h2 id="Springboot-整合Sa-Token"><a href="#Springboot-整合Sa-Token" class="headerlink" title="Springboot 整合Sa-Token"></a>Springboot 整合Sa-Token</h2><blockquote><p>文档：<a href="https://sa-token.cc">https://sa-token.cc</a></p><p>根据自己选择的版本来进入不同的文档</p><p>这是当前文档选择的版本文档：<a href="https://sa-token.cc/v/v1.34.0/doc.html#/">https://sa-token.cc/v/v1.34.0/doc.html#/</a></p></blockquote><h2 id="什么是Sa-Token？"><a href="#什么是Sa-Token？" class="headerlink" title="什么是Sa-Token？"></a>什么是Sa-Token？</h2><blockquote><p><strong>Sa-Token</strong> 是一个轻量级 Java 权限认证框架，主要解决：<strong>登录认证</strong>、<strong>权限认证</strong>、<strong>单点登录</strong>、<strong>OAuth2.0</strong>、<strong>分布式Session会话</strong>、<strong>微服务网关鉴权</strong> 等一系列权限相关问题。</p><p>Sa-Token 旨在以简单、优雅的方式完成系统的权限认证部分</p></blockquote><h2 id="为什么用它呢？"><a href="#为什么用它呢？" class="headerlink" title="为什么用它呢？"></a>为什么用它呢？</h2><p>简单开箱即用，文档详细，简单易上手，功能丰富。</p><p>缺点：个人感觉封装的东西太多，导致丧失一定的灵活性，可能在碰到一些问题解决的成本也比较高。</p><h2 id="SpringBoot-整合Sa-Token"><a href="#SpringBoot-整合Sa-Token" class="headerlink" title="SpringBoot 整合Sa-Token"></a>SpringBoot 整合Sa-Token</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Sa-Token 权限认证，在线文档：https://sa-token.cc/v/v1.34.0/doc.html#/ --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;saToken.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入这个的Redis的前提是先引入Redis 本身的依赖 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.dev33<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sa-token-dao-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;saToken.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>yml配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">spring:</span></span><br><span class="line"> <span class="comment"># redis配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="comment">#    password: root</span></span><br><span class="line">    <span class="comment"># 连接超时时间</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="comment"># 连接池最大连接数</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">200</span></span><br><span class="line">        <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span></span><br><span class="line">        <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">10</span></span><br><span class="line">        <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">############## Sa-Token 配置 (文档: https://sa-token.cc/v/v1.34.0/doc.html#/use/config) 比配置文件更加灵活 ##############</span></span><br><span class="line"><span class="attr">sa-token:</span></span><br><span class="line">  <span class="comment"># token前缀</span></span><br><span class="line">  <span class="attr">token-prefix:</span> <span class="string">Bearer</span></span><br><span class="line">  <span class="comment"># token名称 (同时也是cookie名称)</span></span><br><span class="line">  <span class="attr">token-name:</span> <span class="string">Authorization</span></span><br><span class="line">  <span class="comment"># token有效期，单位s 默认30天, -1代表永不过期</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">2592000</span></span><br><span class="line">  <span class="comment"># token临时有效期  (指定时间内无操作就视为token过期) 单位: 秒  半个小时</span></span><br><span class="line">  <span class="attr">activity-timeout:</span> <span class="number">1800</span></span><br><span class="line">  <span class="comment"># 是否允许同一账号并发登录 (为true时允许一起登录, 为false时新登录挤掉旧登录)</span></span><br><span class="line">  <span class="attr">is-concurrent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在多人登录同一账号时，是否共用一个token (为true时所有登录共用一个token, 为false时每次登录新建一个token)</span></span><br><span class="line">  <span class="attr">is-share:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># token风格</span></span><br><span class="line">  <span class="attr">token-style:</span> <span class="string">uuid</span></span><br><span class="line">  <span class="comment"># 是否输出操作日志</span></span><br><span class="line">  <span class="attr">is-log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># jwt秘钥</span></span><br><span class="line">  <span class="attr">jwt-secret-key:</span> <span class="string">asdsdaeuiwstarac123</span></span><br><span class="line">  <span class="comment"># 是否读取cookie</span></span><br><span class="line">  <span class="attr">is-read-cookie:</span> <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="实现Stp接口"><a href="#实现Stp接口" class="headerlink" title="实现Stp接口"></a>实现Stp接口</h2><blockquote><p>该接口主要是用于saToken在查询用户权限或者角色时进行调用的实现类</p></blockquote><p>StpInterfaceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StpInterfaceImpl</span> <span class="keyword">implements</span> <span class="title class_">StpInterface</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个用户所拥有的权限集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getPermissionList</span><span class="params">(Object loginId, String loginKey)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.parseLong(loginId.toString());</span><br><span class="line">        <span class="comment">// 根据用户Id去查询用户对应的权限</span></span><br><span class="line">        List&lt;String&gt; list = userMapper.searchUserPermissions(userId);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个用户所拥有的角色标识集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getRoleList</span><span class="params">(Object loginId, String loginKey)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> Long.parseLong(loginId.toString());</span><br><span class="line">        <span class="comment">// 根据用户ID去查询对应角色的角色</span></span><br><span class="line">        userMapper.searchUserRole(userId);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开启注解并配置拦截器"><a href="#开启注解并配置拦截器" class="headerlink" title="开启注解并配置拦截器"></a>开启注解并配置拦截器</h2><p>SaTokenInterceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SaTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册Sa-Token的注解拦截器，打开注解式鉴权功能 这样的话就可以进行注解校验了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;sa-token拦截器&quot;</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">SaInterceptor</span>(handler -&gt; &#123;</span><br><span class="line">                    <span class="comment">// 指定一条 match 规则</span></span><br><span class="line">                    SaRouter</span><br><span class="line">                            .match(<span class="string">&quot;/**&quot;</span>)    <span class="comment">// 拦截的 path 列表，可以写多个 */</span></span><br><span class="line">                            <span class="comment">// 排除掉的 path 列表</span></span><br><span class="line">                            <span class="comment">// 排除指定url  获取的方法</span></span><br><span class="line">                            .notMatch(<span class="string">&quot;/**/login/**&quot;</span>, <span class="string">&quot;/**/outLogin/**&quot;</span>, <span class="string">&quot;/**/error/**&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/**/register/**&quot;</span>, <span class="string">&quot;/**/verify/**&quot;</span>, <span class="string">&quot;/**/monitorLogin/**&quot;</span>, <span class="string">&quot;/**/enterprise/get&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;/**/enterprise/getLogo&quot;</span>, <span class="string">&quot;/**/getSAStoken/**&quot;</span>, <span class="string">&quot;/**/favicon.ico&quot;</span>)</span><br><span class="line">                            .notMatch(<span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;/v2/**&quot;</span>, <span class="string">&quot;/swagger-ui.html/**&quot;</span>, <span class="string">&quot;/doc.html&quot;</span>)</span><br><span class="line">                            .check(r -&gt; &#123;</span><br><span class="line">                                        <span class="comment">// 先判断是否登录</span></span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            StpUtil.checkLogin();</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (NotLoginException e) &#123;</span><br><span class="line">                                            log.error(e.getMessage());</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BizException</span>(ResultCode.RC403);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="comment">// 查看token是否要过期</span></span><br><span class="line">                                        <span class="type">long</span> <span class="variable">tokenSessionTimeout</span> <span class="operator">=</span> StpUtil.getTokenTimeout();<span class="comment">// 获取当前 Token 剩余有效时间 (单位: 秒)</span></span><br><span class="line">                                        log.info(<span class="string">&quot;tokenSessionTimeout剩余时间&#123;&#125;:&quot;</span>, tokenSessionTimeout);</span><br><span class="line">                                        <span class="comment">// 如果小于一天 那么就进行续期</span></span><br><span class="line">                                        <span class="keyword">if</span> (tokenSessionTimeout &lt; (<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>)) &#123;</span><br><span class="line">                                            <span class="comment">// 续期10天</span></span><br><span class="line">                                            StpUtil.renewTimeout(<span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">10</span>);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                            );        <span class="comment">// 校验是否登录了</span></span><br><span class="line">                    <span class="comment">// 根据路由划分模块，不同模块不同鉴权</span></span><br><span class="line">                    SaRouter.notMatch(<span class="string">&quot;/**/login/**&quot;</span>,<span class="string">&quot;/**/outLogin/**&quot;</span>).match(<span class="string">&quot;/user/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;user&quot;</span>));</span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/role/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;role&quot;</span>));</span><br><span class="line">                    SaRouter.match(<span class="string">&quot;/func/**&quot;</span>, r -&gt; StpUtil.checkPermission(<span class="string">&quot;func&quot;</span>));</span><br><span class="line">                &#125;))</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册 [Sa-Token全局过滤器]  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SaServletFilter <span class="title function_">getSaServletFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SaServletFilter</span>()</span><br><span class="line">        <span class="comment">// 拦截与排除 path </span></span><br><span class="line">        .addInclude(<span class="string">&quot;/**&quot;</span>).addExclude(<span class="string">&quot;/favicon.ico&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 全局认证函数 </span></span><br><span class="line">        .setAuth(obj -&gt; &#123;</span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 异常处理函数  </span></span><br><span class="line">        .setError(e -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> AjaxJson.getError(e.getMessage());</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 前置函数：在每次认证函数之前执行</span></span><br><span class="line">        .setBeforeAuth(obj -&gt; &#123;</span><br><span class="line">        <span class="comment">// ---------- 设置跨域响应头 ----------</span></span><br><span class="line">        SaHolder.getResponse()</span><br><span class="line">        <span class="comment">// 允许指定域访问跨域资源</span></span><br><span class="line">        .setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">        <span class="comment">// 允许所有请求方式</span></span><br><span class="line">        .setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;POST, GET, OPTIONS, DELETE&quot;</span>)</span><br><span class="line">        <span class="comment">// 有效时间</span></span><br><span class="line">        .setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>)</span><br><span class="line">        <span class="comment">// 允许的header参数</span></span><br><span class="line">        .setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果是预检请求，则立即返回到前端 </span></span><br><span class="line">        SaRouter.match(SaHttpMethod.OPTIONS)</span><br><span class="line">        .free(r -&gt; System.out.println(<span class="string">&quot;--------OPTIONS预检请求，不做处理&quot;</span>))</span><br><span class="line">        .back();</span><br><span class="line">        &#125;)</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整合gitHub地址: <a href="https://github.com/clollipop/springbootInit">https://github.com/clollipop/springbootInit</a></p><p>到这里实际已经完成了整个的配置</p><p>如果要实现其他的操作可以参看官方文档，官方文档写的更加详细。</p>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx dockerfile 整合前后端</title>
      <link href="/post/nginx-docker-compose-deploy.html"/>
      <url>/post/nginx-docker-compose-deploy.html</url>
      
        <content type="html"><![CDATA[<h2 id="创建dockerfile"><a href="#创建dockerfile" class="headerlink" title="创建dockerfile"></a>创建dockerfile</h2><blockquote><p> 创建一个Dockerfile用于构建Nginx容器。</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Nginx镜像作为基础镜像 最新版本</span></span><br><span class="line"><span class="keyword">FROM</span> nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除默认Nginx配置</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /etc/nginx/conf.d/default.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制自定义Nginx配置文件 只能复制同级目录下的文件</span></span><br><span class="line"><span class="comment"># 这种复制的并不灵活 如果我们确定以后一定不会有改动，或者如果有改动就进行删除容器然后在重新创建，或者进入docker bash 去里面改的话，不觉得麻烦的话也可以采用这种方式</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制前端构建好的项目文件到Nginx的webroot目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> dist/ /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231011213424645.png" alt="image-20231011213424645"></p><h2 id="创建Nginx配置文件"><a href="#创建Nginx配置文件" class="headerlink" title="创建Nginx配置文件"></a>创建Nginx配置文件</h2><blockquote><p>推荐文章：</p><ul><li><a href="https://www.jb51.net/article/264659.htm">docker+Nginx部署前端项目的详细过程记录</a></li><li><a href="https://blog.csdn.net/weixin_42333548/article/details/126032000">nginx部署多个前端项目</a></li></ul></blockquote><p>在Dockerfile所在目录创建一个Nginx配置文件（例如<code>nginx.conf</code>）。</p><p>多环境配置：</p><blockquote><p>花了很多时间去调试这个，直接哭死。</p><p>不过我用的是映射，相对好一些，试想一下如果用第一种岂不是累死，当然也可以进入容器内部进行调试</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">        <span class="attribute">types_hash_max_size</span> <span class="number">2048</span>;</span><br><span class="line">        <span class="comment"># 解决前端页面css样式失败原因</span></span><br><span class="line">        <span class="attribute">include</span> mime.types;</span><br><span class="line">        <span class="attribute">default_type</span> application/octet-stream;</span><br><span class="line">        <span class="comment"># ---------------------------</span></span><br><span class="line">        <span class="comment"># 负载均衡</span></span><br><span class="line">        <span class="section">upstream</span> service_oj&#123;</span><br><span class="line">            <span class="attribute">server</span> <span class="number">47.95.26.11:8101</span> max_fails=<span class="number">1</span> fail_timeout=<span class="number">60s</span> weight=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment"># 要放在 &#x27;/code/nginx/&#x27; 目录下</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment">#监听的端口，80端口是默认端口，在访问时，就无需输入端口号，其他的都需要输入端口号，比如这里访问地址就是127.0.0.1，而若是8080端口，则是127.0.0.1：8080</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="comment">#编码</span></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="comment"># 此处localhost可改为要访问的域名或者ip地址，若有多个用空格隔开。例如 server_name www.baidu.com baidu.com test.baidu.com</span></span><br><span class="line">        <span class="attribute">server_name</span> www.staro.cc; <span class="comment">#  替换为您的域名</span></span><br><span class="line">        <span class="comment"># 配置默认 nginx默认的根目录访问的是html下的index.html页面</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">           <span class="comment">#nginx下HTML文件夹，访问上述域名时会检索此文件夹下的文件进行访问</span></span><br><span class="line">           <span class="attribute">root</span> html;</span><br><span class="line">           <span class="comment">#输入网址（server_name：port）后，默认的访问页面</span></span><br><span class="line">           <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># oj 项目配置 路径 例如： www.baidu.com/oj/..... 前端路径</span></span><br><span class="line">        <span class="section">location</span><span class="regexp"> ^~/oj</span> &#123;</span><br><span class="line">         <span class="attribute">alias</span> /usr/share/nginx/html/web/staroj-frontend/dist;</span><br><span class="line">         <span class="attribute">add_header</span> Access-Control-Allow-Credentials <span class="literal">true</span>;</span><br><span class="line">         <span class="attribute">add_header</span> Access-Control-Allow-Origin *;</span><br><span class="line">         <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;POST, GET, PUT, OPTIONS, DELETE&#x27;</span>;</span><br><span class="line">         <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;Origin, X-Requested-With, Content-Type,Accept, token&#x27;</span>;</span><br><span class="line">         <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /oj/index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># oj 后端配置</span></span><br><span class="line">         <span class="section">location</span> /ojbackend/ &#123;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">&quot;<span class="variable">$http_origin</span>&quot;</span> always ;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,OPTIONS, DELETE&#x27;</span>;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Headers  <span class="string">&#x27;token, Accept, Origin, XRequestedWith, Content-Type, LastModified&#x27;</span>;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>;</span><br><span class="line">           <span class="attribute">client_max_body_size</span> <span class="number">40m</span>;</span><br><span class="line">           <span class="attribute">proxy_redirect</span> http:// https://;</span><br><span class="line">           <span class="attribute">proxy_pass</span> http://service_oj/api/;</span><br><span class="line">           <span class="attribute">proxy_redirect</span> default;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Origin <span class="variable">$http_origin</span>;</span><br><span class="line">           <span class="comment"># 把host头传过去，后端服务程序将收到your.domain.name, 否则收到的是localhost:8080</span></span><br><span class="line">           <span class="comment"># 把cookie中的path部分从/api替换成/</span></span><br><span class="line">           <span class="attribute">proxy_cookie_path</span> /ojbackend/ /api;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># oj-sandbox 后端配置</span></span><br><span class="line">         <span class="section">location</span> /ojSandboxApi/ &#123;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Origin <span class="string">&quot;<span class="variable">$http_origin</span>&quot;</span> always ;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Methods <span class="string">&#x27;GET,POST,OPTIONS, DELETE&#x27;</span>;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Headers  <span class="string">&#x27;token, Accept, Origin, XRequestedWith, Content-Type, LastModified&#x27;</span>;</span><br><span class="line">           <span class="attribute">add_header</span> Access-Control-Allow-Headers <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>;</span><br><span class="line">           <span class="attribute">client_max_body_size</span> <span class="number">40m</span>;</span><br><span class="line">           <span class="attribute">proxy_redirect</span> http:// https://;</span><br><span class="line">           <span class="attribute">proxy_pass</span> http://47.95.26.11:8124/;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">     <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">           <span class="attribute">proxy_set_header</span> Origin <span class="variable">$http_origin</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果以后有其他配置 就进行复制更改</span></span><br><span class="line">    <span class="comment">#     location /wiki &#123;</span></span><br><span class="line">    <span class="comment">#        root html/web/wiki;</span></span><br><span class="line">    <span class="comment">#        index index.html;</span></span><br><span class="line">    <span class="comment">#     &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单环境配置：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> your_domain; <span class="comment"># 将 your_domain 替换为您的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:your_port; <span class="comment"># 将 your_port 替换为您的目标端口</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;          <span class="comment"># 主要是确保目标服务器知道请求是针对哪个域名的</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 确保服务器记录客户端的真实IP地址</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建Docker镜像"><a href="#构建Docker镜像" class="headerlink" title="构建Docker镜像"></a>构建Docker镜像</h2><blockquote><p>在包含Dockerfile的目录中运行以下命令构建Docker镜像。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my-image-name .   <span class="comment">#  my-imag 镜像名称 通过当前目录下的dockerfile</span></span><br><span class="line">docker run -d --name my-container-name my-image-name <span class="comment"># 运行镜像 当然也可以在后面再跟一些容器配置</span></span><br></pre></td></tr></table></figure><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><blockquote><p>这样我们就实现了nginx的部署,但是还是有很多优化的地方</p><p>这里我也踩了一些坑，比如想着如果能实现通用，同时知道了dockerfile或者说docker compose 的路径都是基于上下文的不能选择上一层级的路径</p></blockquote><h3 id="路径映射"><a href="#路径映射" class="headerlink" title="路径映射"></a>路径映射</h3><blockquote><p>这个是个错误示范 因为dockerfile 路径都是基于上下文的不能选择上一层级的路径 </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Nginx镜像作为基础镜像 最新版本</span></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除默认Nginx配置 这里不删除也可以</span></span><br><span class="line">RUN <span class="built_in">rm</span> /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端路径映射 这样是不行的 </span></span><br><span class="line"><span class="comment"># 做文件路径映射到容器中的Nginx配置目录</span></span><br><span class="line">VOLUME /code/nginx/config:/etc/nginx/conf.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做文件路径映射到Nginx的webroot目录</span></span><br><span class="line">VOLUME /code/nginx/web:/usr/share/nginx/html/web</span><br></pre></td></tr></table></figure><blockquote><p>如果更改呢？</p><p>解决办法：可以把dockerfile移动到nginx目录下,如下文</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Nginx镜像作为基础镜像 最新版本</span></span><br><span class="line">FROM nginx:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除默认Nginx配置 这里不删除也可以</span></span><br><span class="line">RUN <span class="built_in">rm</span> /etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前端路径映射 </span></span><br><span class="line"><span class="comment"># 做文件路径映射到容器中的Nginx配置目录</span></span><br><span class="line">VOLUME ./config:/etc/nginx/conf.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做文件路径映射到Nginx的webroot目录</span></span><br><span class="line">VOLUME./web:/usr/share/nginx/html/web</span><br></pre></td></tr></table></figure><h3 id="使用docker-compose启动"><a href="#使用docker-compose启动" class="headerlink" title="使用docker compose启动"></a>使用docker compose启动</h3><blockquote><p>上文是使用了dockerfile，相比较的话我更喜欢docker compose 启动，dockerfile我感觉就在文件目录下的，个人感觉，同时docker compose 比dockeffile集成的东西比较多一些，当然两者也是相互相成的</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  staroj-frontend:</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    container_name: nginx-frontend <span class="comment"># 启动的实例名称</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span> <span class="comment"># 端口映射</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./config/nginx.conf:/etc/nginx/nginx.conf   <span class="comment"># 配置映射</span></span><br><span class="line">      - ./html:/usr/share/nginx/html   <span class="comment"># 前端映射</span></span><br><span class="line">    restart: always <span class="comment"># 崩溃后自动重启</span></span><br><span class="line">    privileged: <span class="literal">true</span> <span class="comment"># 这个必须要，解决nginx的文件调用的权限问题</span></span><br><span class="line">    networks:</span><br><span class="line">      - mynetwork</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络，不定义的话就是默认网络</span></span><br><span class="line">networks:</span><br><span class="line">  mynetwork:</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231015142747532.png" alt="image-20231015142747532"></p><p>docker compose 启动命令 ：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker-compose.nginx.yml up -d</span><br><span class="line">-f 是指定文件 如果当前目录只有一个yml 文件是可以省略的</span><br><span class="line">-d 是后台运行</span><br></pre></td></tr></table></figure><p>如果修改了nginx配置只需要进行重启容器即可。</p><h2 id="前端部署问题"><a href="#前端部署问题" class="headerlink" title="前端部署问题"></a>前端部署问题</h2><p>前端实际也有很多坑</p><ul><li><p>资源路径请求问题：nginx分配的是<code>/oj</code>路径，访问可以访问，但是他请求资源的时候会把<code>`/oj</code>给去掉去获取，这样的话就会形成一个前端获取不到<code>js\css…</code> 问题，</p><p>要解决这个问题只需要在</p><p>前端 <code>vue.config.js</code>进行修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/oj/&quot;</span> : <span class="string">&quot;/&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端<code>router/index.ts</code>进行修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;/oj/&quot;</span> : <span class="string">&quot;/&quot;</span></span><br><span class="line">  ),</span><br><span class="line">  routes,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>​    上面的问题解决了，可是我们也需要启动配置环境变量来进行区分，不然一样会有些问题</p><p>​    1） 创建环境变量文件 <code>.env.dev</code> 和 <code>.env.prod</code> , <code>.env</code>是必须的后面的自定义，一般的话都是这两个</p><p>​    <img src="https://cdn.staro.cc/blog/posts/2310/image-20231015144255661.png" alt="image-20231015144255661"></p><p>​    2）编写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 开发环境 .env.dev</span><br><span class="line">NODE<span class="emphasis">_ENV = development</span></span><br><span class="line"><span class="emphasis">VUE_</span>APP<span class="emphasis">_BASE_</span>URL = http://localhost:8101/api</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//.env.prod 线上环境</span><br><span class="line">NODE<span class="emphasis">_ENV = production</span></span><br><span class="line"><span class="emphasis">VUE_</span>APP<span class="emphasis">_BASE_</span>URL = http://item.staro.cc/ojbackend</span><br></pre></td></tr></table></figure><p>​    3）编写启动环境配置 <code>pakage.js</code></p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231015144620863.png" alt="image-20231015144620863"></p><h2 id="前端加载不出css"><a href="#前端加载不出css" class="headerlink" title="前端加载不出css"></a>前端加载不出css</h2><blockquote><p>这是nginx配置的问题</p><p>查看nginx配置</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attribute">include</span> mime.types;</span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream;</span><br></pre></td></tr></table></figure><h2 id="请求拦截器问题"><a href="#请求拦截器问题" class="headerlink" title="请求拦截器问题"></a>请求拦截器问题</h2><blockquote><p>如果用的不是<a href="https://github.com/ferdikoomen/openapi-typescript-codegen/tree/master">openapi-typescript-codegen</a>自定生成代码那么就无须关注这个问题</p><p>请求问题官方文档:<a href="https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/custom-request-file.md">https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/custom-request-file.md</a></p><p>如果需要请求头设置token: <a href="https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/authorization.md">https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/authorization.md</a></p><p>自定义APIOpen信息:<a href="https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/openapi-object.md">https://github.com/ferdikoomen/openapi-typescript-codegen/blob/master/docs/openapi-object.md</a></p><p>这个自定义APIOpen信息可以解决每次更新覆盖的问题的</p><p>token之前测了一下没有发送，不知道为什么，感兴趣的可以去尝试一下,所以我是去request.ts里面去进行更改，添加token的</p><p>如果我们自定义的文档同时希望再次更新的时候不希望进行覆盖：我们可以使用命令 进行排除</p><p><code>npx openapi-typescript-codegen --input ./spec.json --output ./generated --request ./request.ts</code></p></blockquote><p>request .ts</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> sendRequest = <span class="keyword">async</span> &lt;T&gt;(</span><br><span class="line">  <span class="attr">config</span>: <span class="title class_">OpenAPIConfig</span>,</span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">ApiRequestOptions</span>,</span><br><span class="line">  <span class="attr">url</span>: <span class="built_in">string</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="built_in">any</span>,</span><br><span class="line">  <span class="attr">formData</span>: <span class="title class_">FormData</span> | <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">headers</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;,</span><br><span class="line">  <span class="attr">onCancel</span>: <span class="title class_">OnCancel</span>,</span><br><span class="line">  <span class="attr">axiosClient</span>: <span class="title class_">AxiosInstance</span></span><br><span class="line">): <span class="title class_">Promise</span>&lt;<span class="title class_">AxiosResponse</span>&lt;T&gt;&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> source = axios.<span class="property">CancelToken</span>.<span class="title function_">source</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;</span><br><span class="line">  headers[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="string">&quot;Bearer &quot;</span> + token;</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务项目部署 docker</title>
      <link href="/post/Springbootclod-docker-compose-deploy.html"/>
      <url>/post/Springbootclod-docker-compose-deploy.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux-部署文档"><a href="#linux-部署文档" class="headerlink" title="linux 部署文档"></a>linux 部署文档</h1><blockquote><p>主要是微服务部署</p></blockquote><h2 id="一、Docker-Compose-介绍"><a href="#一、Docker-Compose-介绍" class="headerlink" title="一、Docker Compose 介绍"></a>一、Docker Compose 介绍</h2><p>在介绍 Docker Compose 前，先简单介绍下 Docker。<br>Docker 是一种容器技术，允许开发者将应用程序和所有依赖项（如代码、库、配置等）制作为 镜像。可以把镜像简单理解为软件安装包，可以在不同的计算机上通过它快速安装和启动应用程序（容器），这些程序独立隔离地运行，不受外部环境的影响。</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231006141017536.png" alt="image-20231006141017536"></p><p>如果要部署微服务项目，可能要启动多个 Docker 容器，比如 MySQL 容器、用户服务容器等。这时就需要 Docker Compose 了。它是一个容器编排助手，用于集中管理多个 Docker 容器的启动和协同工作。可以在一个配置文件中集中定义所有容器以及它们的关系。然后，可以使用一行命令启动所有容器，而不需要手动运行多个命令。</p><p>需要注意的是，Docker Compose 通常适用于把所有微服务部署在同一台服务器的场景，在真实的企业级项目中，往往会使用 K8S 等更专业的容器编排和自动化部署工具，更方便地在多个服务器上部署容器。</p><h2 id="二、部署流程"><a href="#二、部署流程" class="headerlink" title="二、部署流程"></a>二、部署流程</h2><p>了解了 Docker 和 Docker Compose 的作用后，我们来快速了解下部署流程，分为 2 大阶段 —— 本地部署和服务器部署。</p><h3 id="一、本地部署"><a href="#一、本地部署" class="headerlink" title="一、本地部署"></a>一、本地部署</h3><p>1）梳理服务部署表格<br>2）Maven 子父模块打包<br>3）Dockerfile 编写<br>4）编写环境依赖配置<br>5）编写服务配置<br>6）调整程序配置<br>7）测试访问</p><h3 id="二、服务端部署"><a href="#二、服务端部署" class="headerlink" title="二、服务端部署"></a>二、服务端部署</h3><p>1）准备服务器<br>2）Docker Compose 安装<br>3）同步文件<br>4）获取 jar 包<br>5）服务启动<br>6）测试访问</p><h2 id="三、本地部署"><a href="#三、本地部署" class="headerlink" title="三、本地部署"></a>三、本地部署</h2><blockquote><p>一般win上面是不能部署的 docker 有问题 ,mac上面还差不多</p></blockquote><h3 id="3-1-梳理服务部署表格"><a href="#3-1-梳理服务部署表格" class="headerlink" title="3.1 梳理服务部署表格"></a>3.1 梳理服务部署表格</h3><p>在部署微服务项目前，首先要规划好要部署哪些服务、以及各服务的关键信息，比如服务名称、版本号、占用端口号、关键配置等。<br>对于我的在线判题项目，梳理好的服务表格如下：</p><div class="table-container"><table><thead><tr><th>服务名称</th><th>英文名</th><th>端口号</th><th>版本号</th><th style="text-align:center">服务类别</th></tr></thead><tbody><tr><td>数据库</td><td>mysql</td><td>3306</td><td>v8</td><td style="text-align:center">环境依赖</td></tr><tr><td>缓存</td><td>redis</td><td>6379</td><td>v6</td><td style="text-align:center">环境依赖</td></tr><tr><td>消息队列</td><td>rabbitmq</td><td>5672, 15672</td><td>v3.12.6</td><td style="text-align:center">环境依赖</td></tr><tr><td>注册中心</td><td>nacos</td><td>8848</td><td>v2.2.0</td><td style="text-align:center">环境依赖</td></tr><tr><td>网关服务</td><td>gateway</td><td>8101</td><td>java 8</td><td style="text-align:center">业务服务</td></tr><tr><td>用户服务</td><td>staroj-backend-user-service</td><td>8102</td><td>java 8</td><td style="text-align:center">业务服务</td></tr><tr><td>题目服务</td><td>staroj-backend-question-service</td><td>8103</td><td>java 8</td><td style="text-align:center">业务服务</td></tr><tr><td>判题服务</td><td>staroj-backend-judge-service</td><td>8104</td><td>java 8</td><td style="text-align:center">业务服务</td></tr></tbody></table></div><p>为什么这里我要划分服务类别为 “环境依赖” 和 “业务服务” 呢？<br>因为在启动服务时，必须要先启动环境依赖，才能启动业务服务，否则就会报类似 “无法连接数据库” 之类的错误。、</p><h3 id="3-2-maven-子父模块打包"><a href="#3-2-maven-子父模块打包" class="headerlink" title="3.2 maven 子父模块打包"></a>3.2 maven 子父模块打包</h3><p>对于微服务项目，我们通常是使用 Maven 的子父模块功能进行管理的。需要部署项目时，不用针对每个子服务单独执行 mvn package 命令进行打包，而是可以一键打包所有服务。<br>想要实现这个功能，需要给子父模块的依赖文件（pom.xml）进行一些配置，主要包括：</p><h4 id="1-父模块配置"><a href="#1-父模块配置" class="headerlink" title="1) 父模块配置"></a>1) 父模块配置</h4><p>在父模块的 pom.xml 文件中引入 <code>spring-boot-maven-plugin</code> 即可，注意一定不要配置 configuration 和 repackage！<br>示例代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-子模块配置"><a href="#2-子模块配置" class="headerlink" title="2)子模块配置"></a>2)子模块配置</h4><p>修改所有需要启动 Spring Boot 的服务（用户服务、题目服务、判题服务、网关服务）的子模块 pom.xml 文件。<br>主要是增加 executions 配置，使用 <code>spring-boot-maven-plugin</code> 的 repackage 命令来构建子模块，从而自动在构建时将公共模块的依赖打入 jar 包。<br>示例代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-DockerFile-编写"><a href="#3-3-DockerFile-编写" class="headerlink" title="3.3 DockerFile 编写"></a>3.3 DockerFile 编写</h3><p>Dockerfile 是定义 Docker 容器镜像构建过程的文件，包括容器镜像使用的基础环境、容器内的依赖和文件、容器的配置、启动命令等。</p><p>有了 Dockerfile，我们就能很轻松地制作出自己的容器镜像。</p><p>虽然 Dockerfile 的写法并不复杂，但我还是建议大家尽量不要自己写，直接去网上找个差不多的项目，复制粘贴别人的 Dockerfile 就足够了！</p><p>这里给大家提供 2 种常用的 Spring Boot 项目的 Dockerfile。</p><h4 id="1）-复制jar包版"><a href="#1）-复制jar包版" class="headerlink" title="1） 复制jar包版"></a>1） 复制jar包版</h4><p>思路：在本地打好 jar 包后，复制 jar 包到容器中运行<br>示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">openjdk:8-jdk-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 jar 包添加到工作目录，比如 target/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="string">ADD</span> &#123;<span class="string">本地</span> <span class="string">jar</span> <span class="string">包路径</span>&#125; <span class="string">.</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="string">EXPOSE</span> &#123;<span class="string">服务端口号</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/&#123;jar 包名称&#125;&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2）-maven-打包版"><a href="#2）-maven-打包版" class="headerlink" title="2） maven 打包版"></a>2） maven 打包版</h4><p>思路：复制本地代码到容器中，在容器中使用 Maven 打包再运行<br>示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">maven:3.8.1-jdk-8-slim</span> <span class="string">as</span> <span class="string">builder</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="string">WORKDIR</span> <span class="string">/app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加源码文件</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">pom.xml</span> <span class="string">.</span></span><br><span class="line"><span class="string">COPY</span> <span class="string">src</span> <span class="string">./src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 jar 包，跳过测试</span></span><br><span class="line"><span class="string">RUN</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="string">ENTRYPOINT</span> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/target/&#123;jar 包名称&#125;&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span><br></pre></td></tr></table></figure><p>此处由于我们的微服务项目可以一键打好所有子服务的 jar 包，就没必要每个服务单独在容器中打包了，所以选择第一种方式的 Dockerfile。</p><p>我们需要给每个 Spring Boot 服务（用户服务、题目服务、判题服务、网关服务）都编写一个 Dockerfile，放到每个子服务的根目录下。</p><h3 id="3-4-编写环境依赖配置"><a href="#3-4-编写环境依赖配置" class="headerlink" title="3.4 编写环境依赖配置"></a>3.4 编写环境依赖配置</h3><p>接下来，我们就要编写 Docker Compose 的配置文件了，可以根据配置文件快速启动多个服务。</p><p>之前我们已经梳理了服务部署表格，将服务划分为了 “环境依赖” 和 “业务服务”。</p><p>由于业务服务依赖 MySQL 等环境依赖，所以需要拆分 2 套 Docker Compose 的配置文件，分别为 <code>docker-compose.env.yml</code> 环境配置和 <code>docker-compose.service.yml</code> 业务服务配置，保证先成功启动依赖，再启动服务。</p><blockquote><p>学过 Docker Compose 的同学可能听说过 depends_on 配置，也能决定服务的启动顺序。但是千万注意，depends_on 并不会等待服务完全就绪，只是确保它们在启动时的顺序，并不稳定。</p></blockquote><p>如何编写 Docker Compose 文件呢？<br>和 Dockerfile 一样，直接去网上找现成的 Docker Compose file，复制粘贴过来略做修改就能使用了~<br>再配合以下 2 个网站，完全无需记忆 Docker Compose 的写法！</p><ul><li>Docker Compose file 官方文档：<a href="https://docs.docker.com/compose/compose-file/">https://docs.docker.com/compose/compose-file/</a></li><li>搜索现成的 Docker 镜像：<a href="https://hub.docker.com/">https://hub.docker.com/</a></li></ul><p>当然，现在 AI 时代了，还有更简单的方式！<br>直接把我们整理好的服务部署需要喂给 GPT，让 AI 帮我们生成配置即可~<br>示例 prompt：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">现在我需要用 docker compose 来部署 mysql <span class="number">8</span>（<span class="number">3306</span> 端口）username=root,password=<span class="number">123456</span></span><br><span class="line">redis <span class="number">6</span>（无密码，<span class="number">6379</span>端口）、rabbitmq v<span class="number">.3</span><span class="number">.12</span><span class="number">.6</span>（ <span class="number">5672</span> 端口   password: guest，username: guest）、nacos <span class="number">2.2</span><span class="number">.0</span>（<span class="number">8848</span>端口）；还有 <span class="number">4</span> 个本地的 springboot 服务（名称分别为：staroj-backend-user-service <span class="number">8102</span>端口、staroj-backend-question-service <span class="number">8103</span>端口、staroj-backend-judge-service <span class="number">8104</span>端口、staroj-backend-gateway <span class="number">8101</span> 端口），每个服务本地目录都有一个 Dockerfile，请帮我自动生成 docker compose 的 yml 配置文件，要求这些服务网络能够连通</span><br></pre></td></tr></table></figure><p>我们要分别在 Docker Compose 中定义 4 大基础依赖，包括 MySQL、Redis、RabbitMQ 和 Nacos。</p><h4 id="1）Mysql"><a href="#1）Mysql" class="headerlink" title="1）Mysql"></a>1）Mysql</h4><p>我们不仅要创建一个 MySQL 服务，还要在创建服务后自动创建我们需要的库表结构。<br>所以需要先准备数据库 SQL 脚本文件，里面包含了建库、建表语句，我们把它放在微服务项目根目录的 <code>mysql-init</code> 文件夹中：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008160159017.png" alt="image-20231008160159017"></p><p>由于要在本地启动 MySQL，还需要定义一个文件夹 .mysql-data 来存放 MySQL 的持久化数据，防止容器重启后数据丢失。</p><p>做好这两点后，就可以编写 <code>docker-compose.env.yml</code> 文件了，先只写一个 MySQL 服务，示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span> <span class="comment"># 使用的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-mysql</span> <span class="comment"># 启动的实例名称</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span> <span class="comment"># root 用户密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span> <span class="comment"># 端口映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.mysql-data:/var/lib/mysql</span> <span class="comment"># 将数据目录挂载到本地目录以进行持久化</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql-init:/docker-entrypoint-initdb.d</span> <span class="comment"># 自动执行启动脚本</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 崩溃后自动重启</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span> <span class="comment"># 指定网络</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span> <span class="comment"># 自定义网络，实现网络互通和隔离</span></span><br></pre></td></tr></table></figure><h4 id="2）Redis"><a href="#2）Redis" class="headerlink" title="2）Redis"></a>2）Redis</h4><p>Redis 服务的定义和启动操作和 MySQL 服务几乎一致，Redis 的 Docker Compose 配置示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.redis-data:/data</span> <span class="comment"># 持久化</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br></pre></td></tr></table></figure><h4 id="3）RabbitMQ"><a href="#3）RabbitMQ" class="headerlink" title="3）RabbitMQ"></a>3）RabbitMQ</h4><p>同 MySQL 和 Redis，RabbitMQ 的 Docker Compose 配置示例代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.12.6-management</span> <span class="comment"># 支持管理面板的消息队列</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-rabbitmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5672:5672&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;15672:15672&quot;</span> <span class="comment"># RabbitMQ Dashboard 端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.rabbitmq-data:/var/lib/rabbitmq</span> <span class="comment"># 持久化</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br></pre></td></tr></table></figure><p>本地执行 Docker Compose 文件，启动 RabbitMQ 服务，然后可以访问 localhost:15672 查看到管理面板，就表示启动成功了~</p><h4 id="4）Nacos"><a href="#4）Nacos" class="headerlink" title="4）Nacos"></a>4）Nacos</h4><p>和其他服务一样，Nacos 也需要编写 Docker Compose 配置。<br>但是在选择 Nacos 镜像时必须要注意，建议选择支持 linux/arm64 架构的镜像版本，比如 v2.2.0-slim，否则后面可能会无法运行：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008160547002.png" alt="image-20231008160547002"></p><p>Nacos 示例配置文件如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:v2.2.0-slim</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-nacos</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.nacos-data:/home/nacos/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span> <span class="comment"># 单节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span> <span class="comment"># 支持 hostname</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 控制时区</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br></pre></td></tr></table></figure><h4 id="完整-Docker-Compose-文件"><a href="#完整-Docker-Compose-文件" class="headerlink" title="完整 Docker Compose 文件"></a>完整 Docker Compose 文件</h4><p>分别调试完上述服务后，我们把所有的配置拼在一起，就得到了完整的文件，文件名为 docker-compose.env.yml。<br>完整代码如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:8</span> <span class="comment"># 使用的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-mysql</span> <span class="comment"># 启动的实例名称</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="number">123456</span> <span class="comment"># root 用户密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span> <span class="comment"># 端口映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.mysql-data:/var/lib/mysql</span> <span class="comment"># 将数据目录挂载到本地目录以进行持久化</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql-init:/docker-entrypoint-initdb.d</span> <span class="comment"># 启动脚本</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span> <span class="comment"># 崩溃后自动重启</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span> <span class="comment"># 指定网络</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-redis</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.redis-data:/data</span> <span class="comment"># 持久化</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.12.6-management</span> <span class="comment"># 支持管理面板的消息队列</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-rabbitmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_USER:</span> <span class="string">guest</span></span><br><span class="line">      <span class="attr">RABBITMQ_DEFAULT_PASS:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5672:5672&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;15672:15672&quot;</span> <span class="comment"># RabbitMQ Dashboard 端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.rabbitmq-data:/var/lib/rabbitmq</span> <span class="comment"># 持久化</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:v2.2.0-slim</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">staroj-nacos</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8848:8848&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./.nacos-data:/home/nacos/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span> <span class="comment"># 单节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PREFER_HOST_MODE=hostname</span> <span class="comment"># 支持 hostname</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TZ=Asia/Shanghai</span> <span class="comment"># 控制时区</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br></pre></td></tr></table></figure><h3 id="3-5-编写业务服务配置"><a href="#3-5-编写业务服务配置" class="headerlink" title="3.5 编写业务服务配置"></a>3.5 编写业务服务配置</h3><p>用同样的方式，我们可以编写业务服务的 Docker Compose 文件，文件名称 <code>docker-compose.service.yml</code>。</p><p>示例代码如下，其中需要格外关注的配置是 build 和 depends_on：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">yuoj-backend-gateway:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yuoj-backend-gateway</span></span><br><span class="line">    <span class="attr">build:</span> <span class="comment"># 服务的 Docker 构建文件位置</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./yuoj-backend-gateway</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8101:8101&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">yuoj-backend-user-service:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yuoj-backend-user-service</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./yuoj-backend-user-service</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8102:8102&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">depends_on:</span> <span class="comment"># 本服务依赖的服务，控制启动先后顺序</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">yuoj-backend-question-service:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yuoj-backend-question-service</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./yuoj-backend-question-service</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8103:8103&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-user-service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-gateway</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">yuoj-backend-judge-service:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">yuoj-backend-judge-service</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./yuoj-backend-judge-service</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8104:8104&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mynetwork</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-user-service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-question-service</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">yuoj-backend-gateway</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络，不定义的话就是默认网络</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">mynetwork:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6、调整程序配置"><a href="#3-6、调整程序配置" class="headerlink" title="3.6、调整程序配置"></a>3.6、调整程序配置</h3><p>编写好上述配置文件后，本地尝试运行 Docker Compose 业务服务，结果发现：报错啦！依赖服务的地址访问不通！</p><p>这是由于之前我们的项目访问依赖服务时，全部是使用了固定的 IP 地址（比如 localhost），而容器内部的 localhost（或 127.0.0.1）通常指向容器本身，而不是宿主主机。所以为了在容器内访问其他服务，程序中应该使用服务名称而不是 localhost。</p><p>我们给每个 Spring Boot 服务都增加一套 prod 上线配置，在配置中更改服务调用地址。</p><p>用户服务、题目服务和判题服务的 <code>application-prod.yml</code> 配置修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生产环境配置文件</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://mysql:3306/yuoj</span> <span class="comment"># localhost 改为 mysql</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">  <span class="comment"># Redis 配置</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">redis</span> <span class="comment"># localhost 改为 redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">5000</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># localhost 改为 nacos</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">rabbitmq</span> <span class="comment"># localhost 改为 rabbitmq</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">guest</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">guest</span></span><br></pre></td></tr></table></figure><p>Gateway 网关服务的配置修改如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="string">nacos:8848</span> <span class="comment"># localhost 改为 nacos 修改处</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">yuoj-backend-user-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://yuoj-backend-user-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/user/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">yuoj-backend-question-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://yuoj-backend-question-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/question/**</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">yuoj-backend-judge-service</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://yuoj-backend-judge-service</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/judge/**</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">yuoj-backend-gateway</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">web-application-type:</span> <span class="string">reactive</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8101</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">gateway:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">strategy:</span> <span class="string">discover</span></span><br><span class="line">    <span class="attr">discover:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">swagger2</span></span><br></pre></td></tr></table></figure><p>能不使用硬编码就绝对不要使用硬编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;spring.rabbitmq.host:localhost&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> String host;</span><br></pre></td></tr></table></figure><h2 id="四、-服务器部署"><a href="#四、-服务器部署" class="headerlink" title="四、 服务器部署"></a>四、 服务器部署</h2><h3 id="4-1-Docker-Compose-安装"><a href="#4-1-Docker-Compose-安装" class="headerlink" title="4.1 Docker Compose 安装"></a>4.1 Docker Compose 安装</h3><blockquote><p>有了服务器后，直接参考 Docker Compose 官方文档来安装。这里我们使用 Docker Compose V2 版本，相比 V1 版本统一了命令，使用更方便：<br>Docker Compose V2 地址：<a href="https://docs.docker.com/compose/migrate/">https://docs.docker.com/compose/migrate/</a><br>Docker Compose Linux 安装：<a href="https://docs.docker.com/compose/install/linux/#install-using-the-repository">https://docs.docker.com/compose/install/linux/#install-using-the-repository</a></p></blockquote><p>安装过程很简单，跟着官方文档来就行了，主要包括以下几个步骤：</p><p>1）设定安装来源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>2）安装 Docker 和 Docker Compose：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><p>3）启动 Docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><p>4）测试 Docker：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="4-2-同步文件"><a href="#4-2-同步文件" class="headerlink" title="4.2 同步文件"></a>4.2 同步文件</h3><p>接下来，我们需要把本地折腾好的微服务项目源码上传到服务器上，可以选择用 FTP 或 SSH 连接文件手动上传文件。</p><p>我这里使用 JetBrains 开发工具的远程部署功能，可以配置文件自动上传，步骤如下：</p><p>1）进入远程部署配置</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008161342485.png" alt="image-20231008161717827"></p><p>2）添加远程部署配置：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008161832508.png" alt="image-20231008161832508"></p><p>3）指定连接的服务器配置：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008162119978.png" alt="image-20231008162119978"></p><p>4）配置本地文件和服务器文件路径映射：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008162351179.png" alt="image-20231008162351179"></p><p>5）开启自动上传：</p><blockquote><p>根据个人，个人觉得没有必要</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008162430646.png" alt="image-20231008162430646"></p><p>6）首次需要手动上传文件。<br>上传前记得先删除无用的文件，然后右键项目根目录，点击部署上传代码：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008162513428.png" alt="image-20231008162513428"></p><p>上传成功，在服务器对应路径（/code/staroj-backend-microservice）下能看到已上传的文件列表：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008164458529.png" alt="image-20231008164458529"></p><h3 id="4-4-获取-jar-包"><a href="#4-4-获取-jar-包" class="headerlink" title="4.4 获取 jar 包"></a>4.4 获取 jar 包</h3><p>光把代码上传到服务器还是不够的，因为我们构建 Docker 镜像需要 jar 包。<br>有 2 种方式得到 jar 包：</p><p>1 ) 本地执行 mvn package 打好 jar 包，然后再上传</p><p>2 ) 服务器上装 Maven，在服务器上打包<br>但是因为 jar 包比较大，频繁改动的话同步速度会比较慢，所以更建议第二种方式，步骤如下：</p><p>1）安装 Maven：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install maven</span><br></pre></td></tr></table></figure><p>2）安装好后，执行打包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mvn package</span><br></pre></td></tr></table></figure><p>打包成功：</p><p><img src="https://cdn.staro.cc/blog/posts/2310/image-20231008174520354.png" alt="image-20231008174520354"></p><h3 id="4-5-服务启动"><a href="#4-5-服务启动" class="headerlink" title="4.5 服务启动"></a>4.5 服务启动</h3><p>所有一切准备就绪，接下来就是使用 Docker Compose 命令分别启动环境依赖和业务服务啦。</p><h4 id="1）启动环境依赖"><a href="#1）启动环境依赖" class="headerlink" title="1）启动环境依赖"></a>1）启动环境依赖</h4><p>先使用 docker compose 一行命令启动环境依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker-compose.env.yml up</span><br></pre></td></tr></table></figure><p>注意：<br>1）老版本使用 “docker-compose” 替代 “docker compose”<br>2）如果没有权限，命令前加上 “sudo”</p><p>记得开启防护墙</p><p>然后电脑远程连接一下，看看是否成功开启</p><p>由于进程在前台启动会影响我们的操作，所以先按 <code>ctrl + c</code> 退出，加上 <code>-d</code> 参数让容器在后台启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.env.yml up -d</span><br></pre></td></tr></table></figure><p>试着查看下 docker 容器的状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stats</span><br></pre></td></tr></table></figure><h4 id="2）启动业务服务"><a href="#2）启动业务服务" class="headerlink" title="2）启动业务服务"></a>2）启动业务服务</h4><p>确保环境依赖都启动成功后，接下来启动业务服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker-compose.service.yml up</span><br></pre></td></tr></table></figure><p>正常来说，应该会启动成功；但如果运气背，可能会有失败，比如我这的网关服务就启动失败了。</p><p>如果某个服务启动失败，可以再次单独只启动它，比如网关服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker compose -f docker-compose.service.yml up yuoj-backend-gateway</span><br></pre></td></tr></table></figure><h3 id="4-6-测试访问"><a href="#4-6-测试访问" class="headerlink" title="4.6 测试访问"></a>4.6 测试访问</h3><p>最后，像验证本地微服务项目部署一样，访问线上网关的接口文档（<a href="http://你的服务器">http://你的服务器</a> IP:8101/doc.html），</p><p>依次调用用户注册 =&gt; 登录 =&gt; 获取登录用户信息 =&gt; 创建题目，全部成功~</p><blockquote><p>由于我的是2g的部署一个环境依赖就已经占用1.8g了，所有我采用两个服务器来进行这个操作，一个用来部署环境依赖 一个用来部署业务服务</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
          <category> 工具笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单体项目部署 docker</title>
      <link href="/post/Springboot-docker-compose-deploy.html"/>
      <url>/post/Springboot-docker-compose-deploy.html</url>
      
        <content type="html"><![CDATA[<h1 id="单体项目部署"><a href="#单体项目部署" class="headerlink" title="单体项目部署"></a>单体项目部署</h1><h2 id="确定需要部署的环境服务依赖"><a href="#确定需要部署的环境服务依赖" class="headerlink" title="确定需要部署的环境服务依赖"></a>确定需要部署的环境服务依赖</h2><h3 id="环境、服务依赖"><a href="#环境、服务依赖" class="headerlink" title="环境、服务依赖"></a>环境、服务依赖</h3><div class="table-container"><table><thead><tr><th style="text-align:center">服务名称</th><th>英文名</th><th>端口号</th><th>版本号</th><th style="text-align:center">服务类别</th></tr></thead><tbody><tr><td style="text-align:center">数据库</td><td>mysql</td><td>3306</td><td>v8</td><td style="text-align:center">环境依赖</td></tr><tr><td style="text-align:center">缓存</td><td>redis</td><td>6379</td><td>v6</td><td style="text-align:center">环境依赖</td></tr><tr><td style="text-align:center">判题服务后端</td><td>star-oj-backend</td><td>8010</td><td>java:8</td><td style="text-align:center">服务依赖</td></tr></tbody></table></div><h2 id="编写服务需要的dockerfile"><a href="#编写服务需要的dockerfile" class="headerlink" title="编写服务需要的dockerfile"></a>编写服务需要的dockerfile</h2><h3 id="在服务器编译打包版本"><a href="#在服务器编译打包版本" class="headerlink" title="在服务器编译打包版本"></a>在服务器编译打包版本</h3><blockquote><p>需要远程同步代码，idea开发工具，可参考博客：</p></blockquote><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker 镜像构建</span></span><br><span class="line"><span class="keyword">FROM</span> maven:<span class="number">3.8</span>.<span class="number">1</span>-jdk-<span class="number">8</span>-slim as builder</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地代码复制到容器映像</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> pom.xml .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> src ./src</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建一个发布工件.  -DskipTests 跳过测试</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> mvn package -DskipTests</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器启动时运行web服务</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/target/staroj-backend-0.0.1-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="上传jar包版本"><a href="#上传jar包版本" class="headerlink" title="上传jar包版本"></a>上传jar包版本</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础镜像</span></span><br><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk-alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 jar 包添加到工作目录，比如 target/yuoj-backend-user-service-0.0.1-SNAPSHOT.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> target/staroj-backend-0.0.1-SNAPSHOT.jar  .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动命令</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app/staroj-backend-0.0.1-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;--spring.profiles.active=prod&quot;</span>]</span></span><br></pre></td></tr></table></figure><h2 id="docker-compose-安装"><a href="#docker-compose-安装" class="headerlink" title="docker compose 安装"></a>docker compose 安装</h2><blockquote><p>这里我们使用 Docker Compose V2 版本，相比 V1 版本统一了命令，使用更方便：<br>Docker Compose V2 地址：<a href="https://docs.docker.com/compose/migrate/">https://docs.docker.com/compose/migrate/</a><br>Docker Compose Linux 安装：<a href="https://docs.docker.com/compose/install/linux/#install-using-the-repository">https://docs.docker.com/compose/install/linux/#install-using-the-repository</a></p></blockquote><h3 id="1）设定安装来源"><a href="#1）设定安装来源" class="headerlink" title="1）设定安装来源"></a>1）设定安装来源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="2）安装-Docker-和-Docker-Compose"><a href="#2）安装-Docker-和-Docker-Compose" class="headerlink" title="2）安装 Docker 和 Docker Compose"></a>2）安装 Docker 和 Docker Compose</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h3 id="启动-Docker"><a href="#启动-Docker" class="headerlink" title="启动 Docker"></a>启动 Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="4）测试-Docker"><a href="#4）测试-Docker" class="headerlink" title="4）测试 Docker"></a>4）测试 Docker</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h2 id="编写docker-compose"><a href="#编写docker-compose" class="headerlink" title="编写docker compose"></a>编写docker compose</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  docker compose 环境依赖 启动项目必须需要的</span></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  <span class="comment"># Mysql</span></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:<span class="number">8</span> <span class="comment"># 使用的镜像</span></span><br><span class="line">    container_name: staroj-mysql <span class="comment"># 启动的实例名称</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="number">123456</span>root <span class="comment"># root 用户密码</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3306:3306&quot;</span> <span class="comment"># 端口映射</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./.mysql-data:/var/lib/mysql <span class="comment"># 将数据目录挂载到本地目录以进行持久化</span></span><br><span class="line">      - ./mysql-init:/docker-<span class="keyword">entrypoint</span><span class="language-bash">-initdb.d <span class="comment"># 启动脚本</span></span></span><br><span class="line">    restart: always <span class="comment"># 崩溃后自动重启</span></span><br><span class="line">    networks:</span><br><span class="line">      - mynetwork</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Redis</span></span><br><span class="line">  redis:</span><br><span class="line">    image: redis:<span class="number">6</span></span><br><span class="line">    container_name: staroj-redis</span><br><span class="line">    command: redis-server --appendonly yes --requirepass <span class="string">&#x27;123456root&#x27;</span>    <span class="comment">#开启持久化的支持并设置认证密码</span></span><br><span class="line"><span class="comment">#    command:  redis-server /usr/local/etc/redis/redis.conf --requirepass &quot;123456&quot;  # 配合下列config 配置</span></span><br><span class="line">    restart: always                           <span class="comment">#跟随docker的启动而启动</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./.redis-data:/data:rw <span class="comment"># 持久化</span></span><br><span class="line"><span class="comment">#      - ./.redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  # redis config 如果没有的话注释掉</span></span><br><span class="line">      - ./.redis/logs:/logs <span class="comment"># 日志</span></span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    networks:</span><br><span class="line">      - mynetwork</span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># springboot 项目</span></span><br><span class="line">  staroj-backend:</span><br><span class="line">    container_name: staroj-backend <span class="comment"># 容器名称</span></span><br><span class="line">    build:</span><br><span class="line">      context: .   <span class="comment"># Dockerfile 路径</span></span><br><span class="line">      dockerfile: Dockerfile  <span class="comment"># 名称</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8101:8101&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - mynetwork</span><br><span class="line">    <span class="comment"># 启动顺序</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - mysql</span><br><span class="line">      - redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络，不定义的话就是默认网络</span></span><br><span class="line">networks:</span><br><span class="line">  mynetwork:</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在服务器启动即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker compose -f docker-compose-name.yml up -d</span><br><span class="line">-f : 指定需要执行的 yml</span><br><span class="line">-d ：后台启动</span><br><span class="line">如果当前目录之后一个ymL文件可以直接</span><br><span class="line">docker compose  up -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
          <category> 工具笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dockerfile </tag>
            
            <tag> docker-compose </tag>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云自动签到</title>
      <link href="/post/aliyun-signIn.html"/>
      <url>/post/aliyun-signIn.html</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="获取阿里云盘refresh-token"><a href="#获取阿里云盘refresh-token" class="headerlink" title="获取阿里云盘refresh_token"></a>获取阿里云盘refresh_token</h3><blockquote><p>阿里云的refresh_token每月会刷新一次，所以在月初进行更新，即可。</p></blockquote><ul><li>打开<a href="https://www.aliyundrive.com/drive">阿里云盘网页版本</a></li></ul><p><img src="https://cdn.staro.cc/blog/posts/2307/20230717235641.png" alt="阿里云"></p><ul><li>shift+ctrl+i 开发者工具 点击 Application 复制refresh_token对应的值<ul><li><img src="https://cdn.staro.cc/blog/posts/2307/20230718000200.png" alt="refresh_token"></li></ul></li></ul><h3 id="获取QQ邮箱-SMTP"><a href="#获取QQ邮箱-SMTP" class="headerlink" title="获取QQ邮箱 SMTP"></a>获取QQ邮箱 SMTP</h3><ul><li><a href="https://laowangblog.com/qq-mail-smtp-service.html">百度</a></li></ul><h2 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h2><h3 id="金山文档网页版"><a href="#金山文档网页版" class="headerlink" title="金山文档网页版"></a>金山文档网页版</h3><ul><li><p><a href="https://www.kdocs.cn/latest">金山文档网页版</a></p></li><li><p>创建一个excel</p></li><li><p>格式必须一样，头名称随意，但是必须是对应的内容</p></li></ul><p>​        <img src="https://cdn.staro.cc/blog/posts/2307/20230721122226.png" alt="excel"></p><ul><li>点击脚本编辑器</li></ul><p><img src="https://cdn.staro.cc/blog/posts/2307/20230721122619.png" alt=""></p><p>​            <img src="https://cdn.staro.cc/blog/posts/2307/20230721123235.png" alt=""><br><details class="folding-tag" ><summary> 签到代码 </summary>              <div class='content'>              <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toLocaleDateString</span>()</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云签到主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sign</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 发送内容</span></span><br><span class="line">  <span class="keyword">let</span> value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 获取excel 内容</span></span><br><span class="line">  <span class="keyword">let</span> excelContext = <span class="title function_">getExcelContext</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; excelContext.<span class="property">refresh_tokens</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 发起网络请求-获取 access_token 和 基本信息</span></span><br><span class="line">    <span class="keyword">let</span> accountData = <span class="variable constant_">HTTP</span>.<span class="title function_">post</span>(<span class="string">&quot;https://auth.aliyundrive.com/v2/account/token&quot;</span>,</span><br><span class="line">      <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="string">&quot;grant_type&quot;</span>: <span class="string">&quot;refresh_token&quot;</span>,</span><br><span class="line">        <span class="string">&quot;refresh_token&quot;</span>: excelContext.<span class="property">refresh_tokens</span>[i]</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">    accountData = accountData.<span class="title function_">json</span>();</span><br><span class="line">    <span class="keyword">let</span> access_token = accountData[<span class="string">&#x27;access_token&#x27;</span>]</span><br><span class="line">    <span class="keyword">let</span> user_name = accountData[<span class="string">&#x27;user_name&#x27;</span>]</span><br><span class="line">    <span class="comment">// 如果 access_token为空</span></span><br><span class="line">    <span class="keyword">if</span> (access_token == <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;账号&quot;</span> + excelContext.<span class="property">refresh_tokens</span>[i] + <span class="string">&quot;token值错误，程序执行失败，请重新复制正确的token值&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(user_name+<span class="string">&quot;:获取用户基本接口调用完成&quot;</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        access_token = <span class="string">&#x27;Bearer &#x27;</span> + access_token</span><br><span class="line">        <span class="comment">// 签到</span></span><br><span class="line">        <span class="keyword">let</span> signIn = <span class="variable constant_">HTTP</span>.<span class="title function_">post</span>(<span class="string">&quot;https://member.aliyundrive.com/v1/activity/sign_in_list&quot;</span>,</span><br><span class="line">          <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;_rx-s&quot;</span>: <span class="string">&quot;mobile&quot;</span> &#125;),</span><br><span class="line">          &#123; <span class="attr">headers</span>: &#123; <span class="string">&quot;Authorization&quot;</span>: access_token &#125; &#125;</span><br><span class="line">        )</span><br><span class="line">        signIn = signIn.<span class="title function_">json</span>()</span><br><span class="line">        <span class="keyword">var</span> signin_count = signIn[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;signInCount&#x27;</span>]</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====签到完成====&quot;</span>)</span><br><span class="line">        <span class="title function_">sleep</span>(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">if</span> (excelContext.<span class="property">sendEmails</span>.<span class="property">length</span> &gt; <span class="number">1</span> ? excelContext.<span class="property">sendEmails</span>[i] : excelContext.<span class="property">sendEmails</span>[<span class="number">0</span>] == <span class="string">&#x27;是&#x27;</span>) &#123;</span><br><span class="line">          <span class="comment">// 领取奖励</span></span><br><span class="line">          <span class="keyword">let</span> reward = <span class="variable constant_">HTTP</span>.<span class="title function_">post</span>(</span><br><span class="line">            <span class="string">&quot;https://member.aliyundrive.com/v1/activity/sign_in_reward?_rx-s=mobile&quot;</span>,</span><br><span class="line">            <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; <span class="string">&quot;signInDay&quot;</span>: signin_count &#125;),</span><br><span class="line">            &#123; <span class="attr">headers</span>: &#123; <span class="string">&quot;Authorization&quot;</span>: access_token &#125; &#125;</span><br><span class="line">          )</span><br><span class="line">          reward = reward.<span class="title function_">json</span>()</span><br><span class="line">          <span class="comment">// 领取奖励名称</span></span><br><span class="line">          <span class="keyword">let</span> name = reward[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;name&quot;</span>];</span><br><span class="line">          <span class="comment">// 领取奖励对应名称解释</span></span><br><span class="line">          <span class="keyword">let</span> description = reward[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;description&quot;</span>];</span><br><span class="line">          value = value + <span class="string">&quot;账号：&quot;</span> + user_name + <span class="string">&quot;-签到成功, 本月累计签到&quot;</span> + signin_count + <span class="string">&quot;天&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;==本次签到获得&quot;</span> + name + <span class="string">&quot;,&quot;</span> + description + <span class="string">&quot;==\n&quot;</span>;</span><br><span class="line">          value += <span class="string">&quot;====================================\n&quot;</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====领取完毕====&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====未领取奖励====&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        value = value + <span class="string">&quot;账号：&quot;</span> + user_name + <span class="string">&quot;-签到成功, 本月累计签到&quot;</span> + signin_count + <span class="string">&quot;天&quot;</span> + <span class="string">&quot;\n&quot;</span> + <span class="string">&quot;====本次签到未领取奖励====\n&quot;</span>;</span><br><span class="line">        value += <span class="string">&quot;====================================\n&quot;</span>;</span><br><span class="line">        <span class="comment">// 是否发送邮件 如果发送邮箱大于2就默认单个发送 </span></span><br><span class="line">        <span class="comment">// 可以按照边界来确定是最好的，按照我的这种判定的话想要单个发送就必须每个阿里令牌都必须对应发送邮箱</span></span><br><span class="line">        <span class="comment">// 不然就会报错</span></span><br><span class="line">        <span class="comment">// 局限性很大</span></span><br><span class="line">        <span class="keyword">if</span> (excelContext.<span class="property">sendEmails</span>.<span class="property">length</span> &gt; <span class="number">1</span> &amp;&amp; excelContext.<span class="property">isEmailInforms</span>[i] == <span class="string">&#x27;是&#x27;</span>) &#123;</span><br><span class="line">          <span class="title function_">sendEmail</span>(</span><br><span class="line">            excelContext.<span class="property">receiveEmails</span>[i],</span><br><span class="line">            excelContext.<span class="property">passwords</span>[i],</span><br><span class="line">            excelContext.<span class="property">sendEmails</span>[i],</span><br><span class="line">            value,</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        value = value + <span class="string">&quot;账号：&quot;</span> + user_name + <span class="string">&quot;-程序出错，请检查代码后重新运行&quot;</span> + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        value += <span class="string">&quot;====================================\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">  <span class="keyword">if</span> (excelContext.<span class="property">sendEmails</span>.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="title function_">sendEmail</span>(</span><br><span class="line">      excelContext.<span class="property">receiveEmails</span>[<span class="number">0</span>],</span><br><span class="line">      excelContext.<span class="property">passwords</span>[<span class="number">0</span>],</span><br><span class="line">      excelContext.<span class="property">sendEmails</span>[<span class="number">0</span>],</span><br><span class="line">      value,</span><br><span class="line">    )</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;====未发送邮件====&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sendEmailType: 1:qq邮箱 2:网易云邮箱 0: 其他</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sendEmail</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  loginEmail = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">  password = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">  sendEmail = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">  sendvalue = <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="params">  emailType = <span class="number">1</span>,</span></span><br><span class="line"><span class="params">  emailLoginConfig = &#123; host: <span class="number">0</span>, port: <span class="number">0</span>, secure: <span class="literal">true</span>, timeOut: <span class="number">10000</span> &#125;,</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (emailType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">//qq邮箱</span></span><br><span class="line">      emailLoginConfig.<span class="property">host</span> = <span class="string">&quot;smtp.qq.com&quot;</span>;</span><br><span class="line">      emailLoginConfig.<span class="property">port</span> = <span class="number">465</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">//网易云邮箱</span></span><br><span class="line">      emailLoginConfig.<span class="property">host</span> = <span class="string">&quot;smtp.163.com&quot;</span>;</span><br><span class="line">      emailLoginConfig.<span class="property">port</span> = <span class="number">25</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 配置发送邮箱</span></span><br><span class="line">  <span class="keyword">let</span> mailer = <span class="variable constant_">SMTP</span>.<span class="title function_">login</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: emailLoginConfig.<span class="property">host</span>, <span class="comment">// SMTP服务器的域名</span></span><br><span class="line">    <span class="attr">port</span>: emailLoginConfig.<span class="property">port</span>, <span class="comment">// 接口</span></span><br><span class="line">    <span class="attr">username</span>: loginEmail, <span class="comment">// 邮箱地址</span></span><br><span class="line">    <span class="attr">password</span>: password, <span class="comment">// 邮箱的SMTP密码，非qq密码</span></span><br><span class="line">    <span class="attr">secure</span>: emailLoginConfig.<span class="property">secure</span>, <span class="comment">// 是否使用TLS连接服务器</span></span><br><span class="line">    <span class="attr">timeout</span>: emailLoginConfig.<span class="property">timeOut</span> <span class="comment">// 等待建立连接的时间，单位毫秒(ms)</span></span><br><span class="line">  &#125;);</span><br><span class="line">  mailer.<span class="title function_">send</span>(&#123;</span><br><span class="line">    <span class="attr">from</span>: <span class="string">&quot;阿里云盘签到&lt;&quot;</span> + loginEmail + <span class="string">&quot;&gt;&quot;</span>, <span class="comment">// 发件人</span></span><br><span class="line">    <span class="attr">to</span>: sendEmail, <span class="comment">// 收件人</span></span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&quot;阿里云盘签到通知-&quot;</span> + now, <span class="comment">// 主题</span></span><br><span class="line">    <span class="attr">text</span>: sendvalue, <span class="comment">// 文本</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取excel里的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getExcelContext</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> context = &#123;</span><br><span class="line">    <span class="attr">receiveEmails</span>: [], <span class="comment">//接收邮箱</span></span><br><span class="line">    <span class="attr">sendEmails</span>: [],<span class="comment">//发送邮箱</span></span><br><span class="line">    <span class="attr">refresh_tokens</span>: [],<span class="comment">//阿里token</span></span><br><span class="line">    <span class="attr">passwords</span>: [],<span class="comment">//邮箱SMTP密码</span></span><br><span class="line">    <span class="attr">isRewards</span>: [],<span class="comment">//是否领取奖励</span></span><br><span class="line">    <span class="attr">isEmailInforms</span>: []<span class="comment">//是否邮件通知</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 接收邮箱</span></span><br><span class="line">  context.<span class="property">receiveEmails</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">  <span class="comment">//发送邮箱</span></span><br><span class="line">  context.<span class="property">sendEmails</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;D&quot;</span>);</span><br><span class="line">  <span class="comment">//阿里token</span></span><br><span class="line">  context.<span class="property">refresh_tokens</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;E&quot;</span>);</span><br><span class="line">  <span class="comment">//邮箱SMTP密码</span></span><br><span class="line">  context.<span class="property">passwords</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;F&quot;</span>);</span><br><span class="line">  <span class="comment">//是否领取奖励</span></span><br><span class="line">  context.<span class="property">isRewards</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;G&quot;</span>);</span><br><span class="line">  <span class="comment">//是否邮件通知</span></span><br><span class="line">  context.<span class="property">isEmailInforms</span> = <span class="title function_">getColumnValues</span>(<span class="string">&quot;H&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取指定列内容 返回数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getColumnValues</span> = (<span class="params">column = <span class="string">&quot;&quot;</span>, i = <span class="number">2</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> columnValues = [];</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> columnValue = <span class="title class_">Application</span>.<span class="title class_">Range</span>(column + i);</span><br><span class="line">    <span class="keyword">if</span> (columnValue.<span class="property">Value</span> == <span class="string">&#x27;&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">    columnValues.<span class="title function_">push</span>(columnValue.<span class="property">Value</span>);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> columnValues;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 等待 由于不支持setTimeout 只能用循环来模拟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">d</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="title class_">Date</span>.<span class="title function_">now</span>() - t &lt;= d;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果选择不用邮件接收那么将创建新的工作表，在创建的月份工作表中写入数据</span></span><br><span class="line"><span class="comment"> * 由于官方api并没有创建工作表的方法，所以要提前创建好对应月份的工作表，实际意义不大，算了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">writeWorkSheet</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始</span></span><br><span class="line"><span class="title function_">sign</span>()</span><br></pre></td></tr></table></figure>              </div>            </details></p><ul><li>菜鸡代码，可以修改的地方很多，很多地方想扩展性好一点却又写死了，也不想搞了，如果有更好的，可以评论进行交流学习学习。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 基础命令</title>
      <link href="/post/docker-basicsOrder.html"/>
      <url>/post/docker-basicsOrder.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-介绍"><a href="#docker-介绍" class="headerlink" title="docker 介绍"></a>docker 介绍</h2><h3 id="docker-是什么？"><a href="#docker-是什么？" class="headerlink" title="docker 是什么？"></a>docker 是什么？</h3><ul><li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 <strong>UnionFS</strong> 等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</li><li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li><li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样</strong></li></ul><hr><h3 id="为什么要用docker？"><a href="#为什么要用docker？" class="headerlink" title="为什么要用docker？"></a>为什么要用docker？</h3><ol><li>一致的运行环境：<em>docker 提供完整的运行时环境，确保应用运行环境一致</em></li><li>更快的启动时间</li><li>隔离性</li><li>迁移方便</li></ol><hr><h2 id="docker-基本概念"><a href="#docker-基本概念" class="headerlink" title="docker 基本概念"></a>docker 基本概念</h2><p><strong>Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。</strong></p><ul><li><strong>镜像（Image）</strong></li><li><strong>容器（Container）</strong></li><li><strong>仓库（Repository）</strong></li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期</p><p><strong>从仓库—&gt;拉取—&gt;镜像，通过镜像—&gt;创建—&gt;容器</strong></p><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><blockquote><ul><li><p>当我们需要部署和运行应用程序时，通常需要预先安装并配置各种软件环境、库和依赖。这个过程十分繁琐且容易出错，而 Docker 镜像的出现为我们提供了一种解决方案。</p></li><li><p>Docker 镜像是 Docker 容器的基础，它是一个轻量级的、可执行的、可移植的容器打包文件，包含了运行应用程序所需的所有代码、库、配置文件和依赖项。</p></li><li>Docker 镜像采用分层的存储方式，每一层都是只读的，并且具有唯一的 ID。</li></ul></blockquote><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 (Container)"></a>容器 (Container)</h3><blockquote><ul><li>它是 Docker 镜像的实例化运行态，具有轻量、可移植、可扩展等优势</li><li>Docker 容器是 Docker 镜像的实例，可以理解为一个可运行的进程。</li></ul></blockquote><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库 (Repository)"></a>仓库 (Repository)</h3><blockquote><ul><li>Docker 仓库是用于存储和管理 Docker 镜像的中心化存储库。</li><li>Docker Hub 是官方的公共 Docker 镜像仓库，提供了大量的开源镜像，也支持私有仓库。</li></ul></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><ul><li><p><a href="https://juejin.cn/post/6844903829683568647">docker常用命令</a></p></li><li><p><a href="https://yeasy.gitbook.io/docker_practice/">docker 从入门到实战</a></p></li><li><a href="https://juejin.cn/post/6844903958046048264">Docker 三要素 ：镜像、容器和仓库</a></li><li><a href="https://www.jianshu.com/p/adaa34795e64">Docker 常用命令与操作</a></li><li><a href="https://juejin.cn/post/6913568633813729294">5分钟带你快速了解Docker和k8s</a></li></ul></blockquote><h3 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h3><ul><li><p>查看docker版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>关闭docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>重启docker服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li><p>关闭docker服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker stop</span><br></pre></td></tr></table></figure></li><li><p>日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br></pre></td></tr></table></figure></li><li><p>故障检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker status</span><br></pre></td></tr></table></figure></li><li><p>显示docker系统的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br></pre></td></tr></table></figure></li></ul><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -a</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imagesId]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除本地全部镜像  docker images -a -q 查询全部 镜像<span class="built_in">id</span></span></span><br><span class="line">docker rmi `docker images -a -q`</span><br></pre></td></tr></table></figure><h4 id="查看指定镜像的创建历史"><a href="#查看指定镜像的创建历史" class="headerlink" title="查看指定镜像的创建历史"></a>查看指定镜像的创建历史</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [id]</span><br></pre></td></tr></table></figure><h4 id="指定镜像保存成-tar-归档文件，-docker-load-的逆操作"><a href="#指定镜像保存成-tar-归档文件，-docker-load-的逆操作" class="headerlink" title="指定镜像保存成 tar 归档文件， docker load 的逆操作"></a>指定镜像保存成 tar 归档文件， docker load 的逆操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save</span><br><span class="line"><span class="comment"># 将镜像 jdk:8 保存为 jdk8.tar 文件</span></span><br><span class="line">docker save -o jdk8.tar jdk:8</span><br></pre></td></tr></table></figure><h4 id="从-tar-镜像归档中载入镜像，-docker-save-的逆操作"><a href="#从-tar-镜像归档中载入镜像，-docker-save-的逆操作" class="headerlink" title="从 tar 镜像归档中载入镜像， docker save 的逆操作"></a>从 tar 镜像归档中载入镜像， docker save 的逆操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker load</span><br><span class="line"><span class="comment"># 上面命令的意思是将 jdk8.tar 文件载入镜像中</span></span><br><span class="line">docker load -i jdk8.tar</span><br><span class="line">docker load &lt; /home/jdk8.tar</span><br></pre></td></tr></table></figure><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br><span class="line"><span class="comment"># 搜索处收藏数不小于 3 ，并且能够自动化构建的  jdk 镜像，并且完整显示镜像描述</span></span><br><span class="line">docker search -s 3 --automated --no-trunc jdk</span><br><span class="line">docker pull</span><br><span class="line"><span class="comment"># 拉取jdk最新的镜像</span></span><br><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><h5 id="options-说明"><a href="#options-说明" class="headerlink" title="options 说明"></a>options 说明</h5><div class="table-container"><table><thead><tr><th style="text-align:center">option</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">-i</td><td style="text-align:left">以交互模式运行容器，通常与 -t 同时使用</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:left">启动容器后，为容器分配一个命令行，通常与 -i 同时使用</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:left">目录映射，容器目录挂载到宿主机目录，格式： <host目录>:&lt;容器目录&gt;</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:left">守护进程，后台运行该容器</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:left">指定端口映射，<strong>格式</strong>：主机(宿主)端口:容器端口</td></tr><tr><td style="text-align:center">-P</td><td style="text-align:left">随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:left">以什么用户身份创建容器</td></tr><tr><td style="text-align:center">—net  mynet –ip  172.20.0.6</td><td style="text-align:left">指定网段(mynet 是已经创建的网段名称) 分配mynet 范围内的ip</td></tr><tr><td style="text-align:center">-e , —env=[]</td><td style="text-align:left">指定环境变量，容器中可以使用该环境变量</td></tr><tr><td style="text-align:center">—name “nginx-lb”</td><td style="text-align:left">容器名字</td></tr><tr><td style="text-align:center">-m, —memory bytes</td><td style="text-align:left">设置容器使用内存最大值</td></tr><tr><td style="text-align:center">-h, —hostname string</td><td style="text-align:left">指定容器的 host name</td></tr><tr><td style="text-align:center">—dns 8.8.8.8</td><td style="text-align:left">指定容器 dns 服务器</td></tr><tr><td style="text-align:center">-e username=”ritchie”</td><td style="text-align:left">设置环境变量</td></tr><tr><td style="text-align:center">—privileged</td><td style="text-align:left">容器内是否使用真正的 root 权限</td></tr></tbody></table></div><ul><li>查看一下 是否看得懂 <a href="https://www.cnblogs.com/poloyy/p/13926296.html">参考地址-有命令解释</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name mq \</span><br><span class="line">--net mynet --ip 172.18.0.11 \</span><br><span class="line">-p 5672:5672 -m 500m \</span><br><span class="line">-e TZ=Asia/Shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">rabbitmq</span><br></pre></td></tr></table></figure><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看正在运行的容器信息</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器的<span class="built_in">id</span>信息</span></span><br><span class="line">docker ps -a -q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器占用的空间</span></span><br><span class="line">docker ps -as</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STATUS 运行状态</span><br><span class="line">Exited (退出的，未启动的)</span><br></pre></td></tr></table></figure><h4 id="检查镜像或者容器的参数"><a href="#检查镜像或者容器的参数" class="headerlink" title="检查镜像或者容器的参数"></a>检查镜像或者容器的参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查镜像或者容器的参数 ，默认返回 JSON 格式</span></span><br><span class="line">docker inspect [id or name]</span><br></pre></td></tr></table></figure><h4 id="查看一个正在运行容器进程"><a href="#查看一个正在运行容器进程" class="headerlink" title="查看一个正在运行容器进程"></a>查看一个正在运行容器进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看一个正在运行容器进程，支持 ps 命令参数</span></span><br><span class="line">docker top [id or name]</span><br></pre></td></tr></table></figure><h4 id="容器的启动和停止"><a href="#容器的启动和停止" class="headerlink" title="容器的启动和停止"></a>容器的启动和停止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器的启动和停止</span></span><br><span class="line">docker start|stop|restart [id or name]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动全部</span></span><br><span class="line">docker start  `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="容器的删除"><a href="#容器的删除" class="headerlink" title="容器的删除"></a>容器的删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器的删除</span></span><br><span class="line">docker rm [id or name]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部</span></span><br><span class="line">docker rm  `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="杀死容器进程"><a href="#杀死容器进程" class="headerlink" title="杀死容器进程"></a>杀死容器进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死一个或多个指定容器进程</span></span><br><span class="line">docker <span class="built_in">kill</span> -s KILL [<span class="built_in">id</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉全部运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> -s KILL `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker <span class="built_in">log</span> [<span class="built_in">id</span> or name]</span><br></pre></td></tr></table></figure><h4 id="进入交互式容器"><a href="#进入交互式容器" class="headerlink" title="进入交互式容器"></a>进入交互式容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -i &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -t &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -d &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ss /bin/bash -c <span class="string">&#x27;cd /root/ss/ShardingSphere/bin &amp;&amp; ./start.sh&#x27;</span></span><br><span class="line">这个命令在名为 `ss` 的容器中启动了一个交互式 shell，并在该 shell 中执行了一些命令。`-i` 选项保持 STDIN 打开，`-t` 选项分配伪终端。`/bin/bash -c` 命令用于在 bash shell 中执行指定的命令。</span><br><span class="line">执行的命令是 `<span class="built_in">cd</span> /root/ss/ShardingSphere/bin &amp;&amp; ./start.sh`，它将当前目录更改为 `/root/ss/ShardingSphere/bin`，然后运行 `./start.sh` 脚本。</span><br></pre></td></tr></table></figure><ul><li><p>只用 <code>-i</code> 参数，由于没有分配伪终端，看起来像pipe执行一样。但是执行结果、命令返回值都可以正确获取 一般和t连用</p></li><li><p>只用 <code>-t</code> 参数，则可以看到一个 console 窗口，但是执行命令会发现由于没有获得stdin的输出，无法看到命令执行情况,一般和i连用</p></li><li><p>使用 <code>-it</code> 时，则和我们平常操作 console 界面类似，而且也<code>不会像attach方式因为退出，导致整个容器退出</code></p></li><li><p>使用 <code>-d</code> 参数，在后台执行一个进程。如果一个命令需要长时间进程，会很快返回</p></li></ul><h3 id="仓库相关"><a href="#仓库相关" class="headerlink" title="仓库相关"></a>仓库相关</h3><h4 id="登录到远程仓库"><a href="#登录到远程仓库" class="headerlink" title="登录到远程仓库"></a>登录到远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login [username] [password] <span class="comment"># 登录到一个registry</span></span><br></pre></td></tr></table></figure><ul><li><code>--password</code> 或 <code>-p</code>：密码</li><li><code>--password-stdin</code>：从标准输入中获取密码</li><li><code>--username</code> 或 <code>-u</code>：用户名</li></ul><h4 id="从registry仓库搜索镜像"><a href="#从registry仓库搜索镜像" class="headerlink" title="从registry仓库搜索镜像"></a>从registry仓库搜索镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索处收藏数不小于 3 ，并且能够自动化构建的  jdk 镜像，并且完整显示镜像描述</span></span><br><span class="line">docker search -s 3 --automated --no-trunc jdk</span><br></pre></td></tr></table></figure><h4 id="从仓库下载镜像到本地"><a href="#从仓库下载镜像到本地" class="headerlink" title="从仓库下载镜像到本地"></a>从仓库下载镜像到本地</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull [name]:[vesion]</span><br><span class="line"><span class="comment"># 拉去jdk最新镜像</span></span><br><span class="line">docker pull jdk:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli整合monaco代码编辑器</title>
      <link href="/post/vue-cli-monaco-conformity.html"/>
      <url>/post/vue-cli-monaco-conformity.html</url>
      
        <content type="html"><![CDATA[<h2 id="Monaco代码编辑器"><a href="#Monaco代码编辑器" class="headerlink" title="Monaco代码编辑器"></a>Monaco代码编辑器</h2><blockquote><p>微软官方编辑器：<a href="https://github.com/microsoft/monaco-editor">https://github.com/microsoft/monaco-editor</a></p><p>官方提供的整合教程：<a href="https://github.com/microsoft/monaco-editor/blob/main/docs/integrate-esm.md">https://github.com/microsoft/monaco-editor/blob/main/docs/integrate-esm.md</a></p><p>参考博客：<a href="http://chart.zhenglinglu.cn/pages/2244bd/">http://chart.zhenglinglu.cn/pages/2244bd/</a></p><p><a href="https://segmentfault.com/a/1190000042292716">https://segmentfault.com/a/1190000042292716</a> 推荐</p></blockquote><ol><li>该开源代码编辑器是微软官方编辑器,操作方式和风格都很想vscode</li><li>可以扩展性强</li><li>相比较于md编辑器更适合写编程语言的编写，md更适合编程文章</li></ol><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>安装编辑器<code>monaco-editor</code> </p><ul><li>```sh<br>npm install monaco-editor —save<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ vue-cli 项目（webpack 项目）整合 monaco-editor。</span><br><span class="line">  先安装 monaco-editor-webpack-plugin（https://github.com/microsoft/monaco-editor/blob/main/webpack-plugin/README.md）：</span><br><span class="line"></span><br><span class="line">  + ```sh</span><br><span class="line">    npm install monaco-editor-webpack-plugin --save</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>如何使用 Monaco Editor？查看示例教程：<br><a href="https://microsoft.github.io/monaco-editor/playground.html?source=v0.40.0#example-creating-the-editor-hello-world">https://microsoft.github.io/monaco-editor/playground.html?source=v0.40.0#example-creating-the-editor-hello-world</a></p><p>在 vue.config.js 中配置 webpack 插件：</p></blockquote><h3 id="全量加载："><a href="#全量加载：" class="headerlink" title="全量加载："></a>全量加载：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MonacoWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;monaco-editor-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">chainWebpack</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    config.<span class="title function_">plugin</span>(<span class="string">&quot;monaco&quot;</span>).<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">MonacoWebpackPlugin</span>());</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载:"></a>按需加载:</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MonacoWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;monaco-editor-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.<span class="title function_">plugin</span>(<span class="string">&#x27;monaco-editor&#x27;</span>).<span class="title function_">use</span>(<span class="title class_">MonacoWebpackPlugin</span>, [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Languages are loaded on demand at runtime</span></span><br><span class="line">        <span class="attr">languages</span>: [<span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;go&#x27;</span>, <span class="string">&#x27;css&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;javascript&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;markdown&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;scss&#x27;</span>, <span class="string">&#x27;shell&#x27;</span>, <span class="string">&#x27;redis&#x27;</span>, <span class="string">&#x27;sql&#x27;</span>, <span class="string">&#x27;typescript&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>], <span class="comment">// [&#x27;abap&#x27;, &#x27;apex&#x27;, &#x27;azcli&#x27;, &#x27;bat&#x27;, &#x27;cameligo&#x27;, &#x27;clojure&#x27;, &#x27;coffee&#x27;, &#x27;cpp&#x27;, &#x27;csharp&#x27;, &#x27;csp&#x27;, &#x27;css&#x27;, &#x27;dart&#x27;, &#x27;dockerfile&#x27;, &#x27;ecl&#x27;, &#x27;fsharp&#x27;, &#x27;go&#x27;, &#x27;graphql&#x27;, &#x27;handlebars&#x27;, &#x27;hcl&#x27;, &#x27;html&#x27;, &#x27;ini&#x27;, &#x27;java&#x27;, &#x27;javascript&#x27;, &#x27;json&#x27;, &#x27;julia&#x27;, &#x27;kotlin&#x27;, &#x27;less&#x27;, &#x27;lexon&#x27;, &#x27;lua&#x27;, &#x27;m3&#x27;, &#x27;markdown&#x27;, &#x27;mips&#x27;, &#x27;msdax&#x27;, &#x27;mysql&#x27;, &#x27;objective-c&#x27;, &#x27;pascal&#x27;, &#x27;pascaligo&#x27;, &#x27;perl&#x27;, &#x27;pgsql&#x27;, &#x27;php&#x27;, &#x27;postiats&#x27;, &#x27;powerquery&#x27;, &#x27;powershell&#x27;, &#x27;pug&#x27;, &#x27;python&#x27;, &#x27;r&#x27;, &#x27;razor&#x27;, &#x27;redis&#x27;, &#x27;redshift&#x27;, &#x27;restructuredtext&#x27;, &#x27;ruby&#x27;, &#x27;rust&#x27;, &#x27;sb&#x27;, &#x27;scala&#x27;, &#x27;scheme&#x27;, &#x27;scss&#x27;, &#x27;shell&#x27;, &#x27;solidity&#x27;, &#x27;sophia&#x27;, &#x27;sql&#x27;, &#x27;st&#x27;, &#x27;swift&#x27;, &#x27;systemverilog&#x27;, &#x27;tcl&#x27;, &#x27;twig&#x27;, &#x27;typescript&#x27;, &#x27;vb&#x27;, &#x27;xml&#x27;, &#x27;yaml&#x27;],</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">features</span>: [<span class="string">&#x27;format&#x27;</span>, <span class="string">&#x27;find&#x27;</span>, <span class="string">&#x27;contextmenu&#x27;</span>, <span class="string">&#x27;gotoError&#x27;</span>, <span class="string">&#x27;gotoLine&#x27;</span>, <span class="string">&#x27;gotoSymbol&#x27;</span>, <span class="string">&#x27;hover&#x27;</span> , <span class="string">&#x27;documentSymbols&#x27;</span>] <span class="comment">//[&#x27;accessibilityHelp&#x27;, &#x27;anchorSelect&#x27;, &#x27;bracketMatching&#x27;, &#x27;caretOperations&#x27;, &#x27;clipboard&#x27;, &#x27;codeAction&#x27;, &#x27;codelens&#x27;, &#x27;colorPicker&#x27;, &#x27;comment&#x27;, &#x27;contextmenu&#x27;, &#x27;coreCommands&#x27;, &#x27;cursorUndo&#x27;, &#x27;dnd&#x27;, &#x27;documentSymbols&#x27;, &#x27;find&#x27;, &#x27;folding&#x27;, &#x27;fontZoom&#x27;, &#x27;format&#x27;, &#x27;gotoError&#x27;, &#x27;gotoLine&#x27;, &#x27;gotoSymbol&#x27;, &#x27;hover&#x27;, &#x27;iPadShowKeyboard&#x27;, &#x27;inPlaceReplace&#x27;, &#x27;indentation&#x27;, &#x27;inlineHints&#x27;, &#x27;inspectTokens&#x27;, &#x27;linesOperations&#x27;, &#x27;linkedEditing&#x27;, &#x27;links&#x27;, &#x27;multicursor&#x27;, &#x27;parameterHints&#x27;, &#x27;quickCommand&#x27;, &#x27;quickHelp&#x27;, &#x27;quickOutline&#x27;, &#x27;referenceSearch&#x27;, &#x27;rename&#x27;, &#x27;smartSelect&#x27;, &#x27;snippets&#x27;, &#x27;suggest&#x27;, &#x27;toggleHighContrast&#x27;, &#x27;toggleTabFocusMode&#x27;, &#x27;transpose&#x27;, &#x27;unusualLineTerminators&#x27;, &#x27;viewportSemanticTokens&#x27;, &#x27;wordHighlighter&#x27;, &#x27;wordOperations&#x27;, &#x27;wordPartOperations&#x27;]</span></span><br><span class="line">      &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建Vue组件"><a href="#创建Vue组件" class="headerlink" title="创建Vue组件"></a>创建Vue组件</h2><blockquote><p>注意，monaco editor 在读写值的时候，要使用 toRaw(编辑器实例）的语法来执行操作，否则会卡死。<br>示例整合代码如下：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;code-editor&quot; ref=&quot;codeEditorRef&quot; style=&quot;min-height: 400px&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import * as monaco from &quot;monaco-editor&quot;;</span><br><span class="line">import &#123; onMounted, ref, toRaw, withDefaults, defineProps &#125; from &quot;vue&quot;;</span><br><span class="line">/**</span><br><span class="line"> * 定义组件属性类型</span><br><span class="line"> */</span><br><span class="line">interface Props &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  handleChange: (v: string) =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 给组件指定初始值</span><br><span class="line"> */</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  value: () =&gt; &quot;&quot;,</span><br><span class="line">  handleChange: (v: string) =&gt; &#123;</span><br><span class="line">    console.log(v);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">// ref 可以获取到vue 的dom 节点 使用toRaw 可以转为 原生Dom 节点</span><br><span class="line">const codeEditorRef = ref();</span><br><span class="line">const codeEditor = ref();</span><br><span class="line">// 在 页面dom节点加载完成时运行</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  if (!codeEditorRef.value) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  //code 编辑器配置创建和相应的初始化</span><br><span class="line">  codeEditor.value = monaco.editor.create(codeEditorRef.value, &#123;</span><br><span class="line">    value: props.value, // 值</span><br><span class="line">    language: &quot;java&quot;, // 语言</span><br><span class="line">    automaticLayout: true, // 自动布局</span><br><span class="line">    colorDecorators: true, // 颜色装饰器</span><br><span class="line">    minimap: &#123;</span><br><span class="line">      enabled: true, //小地图是否开启</span><br><span class="line">    &#125;,</span><br><span class="line">    readOnly: false, //是否只读</span><br><span class="line">    theme: &quot;vs-dark&quot;, //主题</span><br><span class="line">    lineNumbers: &quot;off&quot;, //行号</span><br><span class="line">    // roundedSelection: false, //四舍五入</span><br><span class="line">    // scrollBeyondLastLine: false, //滚动完最后一行后再滚动一屏幕</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  // 编辑 监听内容变化</span><br><span class="line">  codeEditor.value.onDidChangeModelContent(() =&gt; &#123;</span><br><span class="line">    props.handleChange(toRaw(codeEditor.value).getValue());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">#codeEditor &#123;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>实例化代码及具体配置如下：</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//const beautify = require(&#x27;js-beautify&#x27;)</span></span><br><span class="line"><span class="comment">//import &#123; setLocaleData &#125; from &#x27;monaco-editor-nls&#x27;</span></span><br><span class="line"><span class="comment">//import zh_CN from &#x27;monaco-editor-nls/locale/zh-hans&#x27;</span></span><br><span class="line"><span class="comment">//setLocaleData(zh_CN)</span></span><br><span class="line"><span class="comment">//const monaco = require(&#x27;monaco-editor&#x27;)</span></span><br><span class="line"><span class="comment">//const beautify_js = beautify.js</span></span><br><span class="line"><span class="comment">//const beautify_css = beautify.css</span></span><br><span class="line"><span class="comment">//const beautify_html = beautify.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> monaco <span class="keyword">from</span> <span class="string">&quot;monaco-editor&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">editor</span> = monaco.<span class="property">editor</span>.<span class="title function_">create</span>(<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">editor</span>, &#123;</span><br><span class="line">      <span class="attr">acceptSuggestionOnCommitCharacter</span>: <span class="literal">true</span>, <span class="comment">// 接受关于提交字符的建议</span></span><br><span class="line">      <span class="attr">acceptSuggestionOnEnter</span>: <span class="string">&#x27;on&#x27;</span>, <span class="comment">// 接受输入建议 &quot;on&quot; | &quot;off&quot; | &quot;smart&quot; </span></span><br><span class="line">      <span class="attr">accessibilityPageSize</span>: <span class="number">10</span>, <span class="comment">// 辅助功能页面大小 Number 说明：控制编辑器中可由屏幕阅读器读出的行数。警告：这对大于默认值的数字具有性能含义。</span></span><br><span class="line">      <span class="attr">accessibilitySupport</span>: <span class="string">&#x27;on&#x27;</span>, <span class="comment">// 辅助功能支持 控制编辑器是否应在为屏幕阅读器优化的模式下运行。</span></span><br><span class="line">      <span class="attr">autoClosingBrackets</span>: <span class="string">&#x27;always&#x27;</span>, <span class="comment">// 是否自动添加结束括号(包括中括号) &quot;always&quot; | &quot;languageDefined&quot; | &quot;beforeWhitespace&quot; | &quot;never&quot;</span></span><br><span class="line">      <span class="attr">autoClosingDelete</span>: <span class="string">&#x27;always&#x27;</span>, <span class="comment">// 是否自动删除结束括号(包括中括号) &quot;always&quot; | &quot;never&quot; | &quot;auto&quot;</span></span><br><span class="line">      <span class="attr">autoClosingOvertype</span>: <span class="string">&#x27;always&#x27;</span>, <span class="comment">// 是否关闭改写 即使用insert模式时是覆盖后面的文字还是不覆盖后面的文字 &quot;always&quot; | &quot;never&quot; | &quot;auto&quot;</span></span><br><span class="line">      <span class="attr">autoClosingQuotes</span>: <span class="string">&#x27;always&#x27;</span>, <span class="comment">// 是否自动添加结束的单引号 双引号 &quot;always&quot; | &quot;languageDefined&quot; | &quot;beforeWhitespace&quot; | &quot;never&quot;</span></span><br><span class="line">      <span class="attr">autoIndent</span>: <span class="string">&#x27;None&#x27;</span>, <span class="comment">// 控制编辑器在用户键入、粘贴、移动或缩进行时是否应自动调整缩进</span></span><br><span class="line">      <span class="attr">automaticLayout</span>: <span class="literal">true</span>, <span class="comment">// 自动布局</span></span><br><span class="line">      <span class="attr">codeLens</span>: <span class="literal">false</span>, <span class="comment">// 是否显示codeLens 通过 CodeLens，你可以在专注于工作的同时了解代码所发生的情况 – 而无需离开编辑器。 可以查找代码引用、代码更改、关联的 Bug、工作项、代码评审和单元测试。</span></span><br><span class="line">      <span class="attr">codeLensFontFamily</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// codeLens的字体样式</span></span><br><span class="line">      <span class="attr">codeLensFontSize</span>: <span class="number">14</span>, <span class="comment">// codeLens的字体大小</span></span><br><span class="line">      <span class="attr">colorDecorators</span>: <span class="literal">false</span>, <span class="comment">// 呈现内联色彩装饰器和颜色选择器</span></span><br><span class="line">      <span class="attr">comments</span>: &#123;</span><br><span class="line">        <span class="attr">ignoreEmptyLines</span>: <span class="literal">true</span>, <span class="comment">// 插入行注释时忽略空行。默认为真。</span></span><br><span class="line">        <span class="attr">insertSpace</span>: <span class="literal">true</span> <span class="comment">// 在行注释标记之后和块注释标记内插入一个空格。默认为真。</span></span><br><span class="line">      &#125;, <span class="comment">// 注释配置</span></span><br><span class="line">      <span class="attr">contextmenu</span>: <span class="literal">true</span>, <span class="comment">// 启用上下文菜单</span></span><br><span class="line">      <span class="attr">columnSelection</span>: <span class="literal">false</span>, <span class="comment">// 启用列编辑 按下shift键位然后按↑↓键位可以实现列选择 然后实现列编辑</span></span><br><span class="line">      <span class="attr">autoSurround</span>: <span class="string">&#x27;never&#x27;</span>, <span class="comment">// 是否应自动环绕选择</span></span><br><span class="line">      <span class="attr">copyWithSyntaxHighlighting</span>: <span class="literal">true</span>, <span class="comment">// 是否应将语法突出显示复制到剪贴板中 即 当你复制到word中是否保持文字高亮颜色</span></span><br><span class="line">      <span class="attr">cursorBlinking</span>: <span class="string">&#x27;Solid&#x27;</span>, <span class="comment">// 光标动画样式</span></span><br><span class="line">      <span class="attr">cursorSmoothCaretAnimation</span>: <span class="literal">true</span>, <span class="comment">// 是否启用光标平滑插入动画  当你在快速输入文字的时候 光标是直接平滑的移动还是直接&quot;闪现&quot;到当前文字所处位置</span></span><br><span class="line">      <span class="attr">cursorStyle</span>: <span class="string">&#x27;UnderlineThin&#x27;</span>, <span class="comment">// &quot;Block&quot;|&quot;BlockOutline&quot;|&quot;Line&quot;|&quot;LineThin&quot;|&quot;Underline&quot;|&quot;UnderlineThin&quot; 光标样式</span></span><br><span class="line">      <span class="attr">cursorSurroundingLines</span>: <span class="number">0</span>, <span class="comment">// 光标环绕行数 当文字输入超过屏幕时 可以看见右侧滚动条中光标所处位置是在滚动条中间还是顶部还是底部 即光标环绕行数 环绕行数越大 光标在滚动条中位置越居中</span></span><br><span class="line">      <span class="attr">cursorSurroundingLinesStyle</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// &quot;default&quot; | &quot;all&quot; 光标环绕样式</span></span><br><span class="line">      <span class="attr">cursorWidth</span>: <span class="number">2</span>, <span class="comment">// &lt;=25 光标宽度</span></span><br><span class="line">      <span class="attr">minimap</span>: &#123;</span><br><span class="line">        <span class="attr">enabled</span>: <span class="literal">false</span> <span class="comment">// 是否启用预览图</span></span><br><span class="line">      &#125;, <span class="comment">// 预览图设置</span></span><br><span class="line">      <span class="attr">folding</span>: <span class="literal">true</span>, <span class="comment">// 是否启用代码折叠</span></span><br><span class="line">      <span class="attr">links</span>: <span class="literal">true</span>, <span class="comment">// 是否点击链接</span></span><br><span class="line">      <span class="attr">overviewRulerBorder</span>: <span class="literal">false</span>, <span class="comment">// 是否应围绕概览标尺绘制边框</span></span><br><span class="line">      <span class="attr">renderLineHighlight</span>: <span class="string">&#x27;gutter&#x27;</span>, <span class="comment">// 当前行突出显示方式</span></span><br><span class="line">      <span class="attr">roundedSelection</span>: <span class="literal">false</span>, <span class="comment">// 选区是否有圆角</span></span><br><span class="line">      <span class="attr">scrollBeyondLastLine</span>: <span class="literal">false</span>, <span class="comment">// 设置编辑器是否可以滚动到最后一行之后</span></span><br><span class="line">      <span class="attr">readOnly</span>: <span class="literal">false</span>, <span class="comment">// 是否为只读模式</span></span><br><span class="line">      <span class="attr">theme</span>: <span class="string">&#x27;vs&#x27;</span><span class="comment">// vs, hc-black, or vs-dark</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="本地化-i18n"><a href="#本地化-i18n" class="headerlink" title="本地化 i18n"></a>本地化 i18n</h2><blockquote><p>本地化采用monaco-editor-esm-webpack-plugin方式实现，Github地址：<a href="https://github.com/wang12124468/monaco-editor-esm-webpack-plugin">https://github.com/wang12124468/monaco-editor-esm-webpack-plugin</a> 。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 汉化扩展（需要下载包的）：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是对整个编辑器的汉化处理，如果需要进行汉化，那么需要安装此包。</span></span><br><span class="line">npm install monaco-editor-nls -S </span><br><span class="line">//或者使用npm install --save-dev monaco-editor-locales-plugin</span><br><span class="line"><span class="comment">#  针对汉化包所做的webpack插件，需要和汉化包配合使用。</span></span><br><span class="line">npm install monaco-editor-esm-webpack-plugin --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是用来做代码美化的，主要是做一些格式化的工作。</span></span><br><span class="line">npm install js-beautify -S   </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&quot;@vue/cli-service&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 引入 code 编辑器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MonacoWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;monaco-editor-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MonacoLocalesPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;monaco-editor-locales-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="title function_">chainWebpack</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    config</span><br><span class="line">      .<span class="title function_">plugin</span>(<span class="string">&quot;monaco&quot;</span>)</span><br><span class="line">      .<span class="title function_">use</span>(<span class="keyword">new</span> <span class="title class_">MonacoWebpackPlugin</span>())</span><br><span class="line">      .<span class="title function_">use</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MonacoLocalesPlugin</span>(&#123;</span><br><span class="line">          <span class="comment">//设置支持的语言</span></span><br><span class="line">          <span class="attr">languages</span>: [<span class="string">&quot;es&quot;</span>, <span class="string">&quot;zh-cn&quot;</span>],</span><br><span class="line">          <span class="comment">//默认语言</span></span><br><span class="line">          <span class="attr">defaultLanguage</span>: <span class="string">&quot;zh-cn&quot;</span>,</span><br><span class="line">          <span class="comment">//打印不匹配的文本</span></span><br><span class="line">          <span class="attr">logUnmatched</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">//自定义文本翻译</span></span><br><span class="line">          <span class="attr">mapLanguages</span>: &#123;</span><br><span class="line">            <span class="string">&quot;zh-cn&quot;</span>: &#123;</span><br><span class="line">              <span class="string">&quot;Peek References&quot;</span>: <span class="string">&quot;查找引用&quot;</span>,</span><br><span class="line">              <span class="string">&quot;Go to Symbol...&quot;</span>: <span class="string">&quot;跳到变量位置&quot;</span>,</span><br><span class="line">              <span class="string">&quot;Command Palette&quot;</span>: <span class="string">&quot;命令面板&quot;</span>,</span><br><span class="line">              <span class="string">&quot;Go to References&quot;</span>: <span class="string">&quot;参考&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli整合bytemd md编辑器</title>
      <link href="/post/vue-cli-bytemd-conformity.html"/>
      <url>/post/vue-cli-bytemd-conformity.html</url>
      
        <content type="html"><![CDATA[<h2 id="为什么用-Markdown？"><a href="#为什么用-Markdown？" class="headerlink" title="为什么用 Markdown？"></a>为什么用 Markdown？</h2><blockquote><p>一套通用的文本编辑语法，可以在各大网站上统一标准、渲染出统一的样式，比较简单易学。</p></blockquote><p>推荐的 Md 编辑器：<a href="https://github.com/bytedance/bytemd">https://github.com/bytedance/bytemd</a><br>阅读官方文档，下载编辑器主体、以及 gfm（表格支持）插件、highlight 代码高亮插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// vue3-li 用这个下载</span><br><span class="line">npm i @bytemd/vue-next</span><br><span class="line">// 代码高亮插件 和 表格插件</span><br><span class="line">npm i @bytemd/plugin-highlight @bytemd/plugin-gfm</span><br><span class="line">// 掘金主题</span><br><span class="line">npm i juejin-markdown-themes</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="新建MdEditor-vue组件"><a href="#新建MdEditor-vue组件" class="headerlink" title="新建MdEditor.vue组件"></a>新建MdEditor.vue组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Editor</span><br><span class="line">    :value=&quot;value&quot;</span><br><span class="line">    :plugins=&quot;plugins&quot;</span><br><span class="line">    :mode=&quot;mode&quot;</span><br><span class="line">    :locale=&quot;zhHans&quot;</span><br><span class="line">    @change=&quot;handleChange&quot;</span><br><span class="line">  /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import gfm from &quot;@bytemd/plugin-gfm&quot;;</span><br><span class="line">import highlight from &quot;@bytemd/plugin-highlight&quot;;</span><br><span class="line">import &quot;highlight.js/styles/vs.css&quot;; // 代码块高亮</span><br><span class="line">import &quot;juejin-markdown-themes/dist/juejin.min.css&quot;; // 掘金主题</span><br><span class="line">import &quot;@/styles/bytemd/index.css&quot;; // 自定义样式 复制官方的来自己进行修改</span><br><span class="line">import &#123; Editor, Viewer &#125; from &quot;@bytemd/vue-next&quot;;</span><br><span class="line">import &#123; ref, withDefaults, defineProps &#125; from &quot;vue&quot;;</span><br><span class="line">import zhHans from &quot;bytemd/locales/zh_Hans.json&quot;; //汉化</span><br><span class="line">/**</span><br><span class="line"> * 定义组件属性类型 父组件 --&gt; 传给该组件的接收类型</span><br><span class="line"> */</span><br><span class="line">interface Props &#123;</span><br><span class="line">  value: string;</span><br><span class="line">  mode?: string; // 这个是md 模式 是分割还是左右编辑区和视图</span><br><span class="line">  handleChange: (v: string) =&gt; void;</span><br><span class="line">&#125;</span><br><span class="line">const plugins = [</span><br><span class="line">  gfm(),</span><br><span class="line">  highlight(),</span><br><span class="line">];</span><br><span class="line">/**</span><br><span class="line"> * 给组件指定初始值</span><br><span class="line"> */</span><br><span class="line">const props = withDefaults(defineProps&lt;Props&gt;(), &#123;</span><br><span class="line">  value: () =&gt; &quot;&quot;,</span><br><span class="line">  mode: () =&gt; &quot;split&quot;,</span><br><span class="line">  handleChange: (v: string) =&gt; &#123;</span><br><span class="line">    console.log(v);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">// 消除 github 图标</span><br><span class="line">.bytemd-toolbar-icon.bytemd-tippy.bytemd-tippy-right:last-child &#123;</span><br><span class="line">  display: none;</span><br><span class="line">&#125;</span><br><span class="line">// 如果编辑区有左间距 那么可以用这个</span><br><span class="line">.bytemd-editor .CodeMirror .CodeMirror-lines &#123;</span><br><span class="line">  margin: 0 !important;</span><br><span class="line">&#125;</span><br><span class="line">// 如果视图区有左间距 那么可以用这个</span><br><span class="line">.bytemd-preview .markdown-body &#123;</span><br><span class="line">  margin: 0 !important;</span><br><span class="line">&#125;</span><br><span class="line">// 自定义样式里面改高度</span><br><span class="line">.bytemd &#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial,</span><br><span class="line">    sans-serif, Apple Color Emoji, Segoe UI Emoji;</span><br><span class="line">  color: #24292e;</span><br><span class="line">  border: 1px solid #e1e4e8;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  height: 580px !important;</span><br><span class="line">&#125;</span><br><span class="line">// 如果扩大后他不是层级最高的可以去自定义的里面改z-index</span><br><span class="line">.bytemd-fullscreen.bytemd &#123;</span><br><span class="line">  z-index: 888;</span><br><span class="line">  position: fixed;</span><br><span class="line">  inset: 0;</span><br><span class="line">  border: none;</span><br><span class="line">  height: 100vh !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="父组件引用MdEditor-vue"><a href="#父组件引用MdEditor-vue" class="headerlink" title="父组件引用MdEditor.vue"></a>父组件引用MdEditor.vue</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;MdEditor :value=&quot;mdValue&quot; :handle-change=&quot;mdHandleChange&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import MdEditor from &quot;@/components/MdEditor.vue&quot;;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// md</span><br><span class="line">const mdValue = ref(&quot;&quot;);</span><br><span class="line">const mdHandleChange = (v: string) =&gt; &#123;</span><br><span class="line">  mdValue.value = v;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p> 引入掘金主题后，他有许多的其他主题供我们选择</p><p><a href="https://github.com/xitu/juejin-markdown-themes">掘金主题官网</a></p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2309/20230914093353.png" alt="主题"></p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)、创建Vue项目的两种方法</title>
      <link href="/post/c3bd9a63.html"/>
      <url>/post/c3bd9a63.html</url>
      
        <content type="html"><![CDATA[<h3 id="VUE-CLI创建项目"><a href="#VUE-CLI创建项目" class="headerlink" title="VUE-CLI创建项目"></a>VUE-CLI创建项目</h3><h4 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装@vue-cli"></a>全局安装@vue-cli</h4><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli脚手架</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-cli3-project[项目名称]</span><br></pre></td></tr></table></figure><h5 id="选择预设"><a href="#选择预设" class="headerlink" title="选择预设"></a>选择预设</h5><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212165733.png" alt="项目初始化"></p><h5 id="插件选择"><a href="#插件选择" class="headerlink" title="插件选择"></a>插件选择</h5><blockquote><p>选择 Babel、Router、Vuex、Css预处理器、Linter / Formatter 格式检查</p></blockquote><p><img src="http://cdn.staro.cc/blog/posts/2212/20221212170027.png" alt="插件选择"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bable--&gt; 主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法</span><br><span class="line"></span><br><span class="line">TypeScript --&gt; js的超集</span><br><span class="line"></span><br><span class="line">Progressive Web App (PWA) Support --&gt; 提升 Web App 的性能（没用过）</span><br><span class="line"></span><br><span class="line">Router --&gt; 路由管理</span><br><span class="line"></span><br><span class="line">css preprocessor --&gt; css 预处理器</span><br><span class="line"></span><br><span class="line">Linter / Formatter --&gt; 格式检查</span><br><span class="line"></span><br><span class="line">Unit Testing --&gt; Unit 测试框架</span><br><span class="line"></span><br><span class="line">E2E Testing --&gt; E2E 测试</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="选择VUE版本"><a href="#选择VUE版本" class="headerlink" title="选择VUE版本"></a>选择VUE版本</h5><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212180700.png" alt="vue版本选择"></p><h5 id="路由模式选择"><a href="#路由模式选择" class="headerlink" title="路由模式选择"></a>路由模式选择</h5><blockquote><p>是否使用 <code>history</code>模式的路由  </p><p>No  主要是<a href="http://www.a.com/index#">http://www.a.com/index#</a> 和 <a href="http://www.a.com/index">http://www.a.com/index</a> 的区别</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212195215.png" alt="路由模式选择"></p><h5 id="选择一个css预处理器-Less"><a href="#选择一个css预处理器-Less" class="headerlink" title="选择一个css预处理器 (Less)"></a>选择一个css预处理器 (Less)</h5><blockquote><p>选择 Less</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212195457.png" alt="11"></p><h5 id="选择规范方案"><a href="#选择规范方案" class="headerlink" title="选择规范方案"></a>选择规范方案</h5><blockquote><p>vue-cli默认提供了几套规范，我选择了 ESLint 标准规范</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config:</span><br><span class="line">  ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">&gt; ESLint + Standard config  # ESLint 标准规范方案</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><h5 id="选择检测代码规范的操作（保存时，提交时"><a href="#选择检测代码规范的操作（保存时，提交时" class="headerlink" title="选择检测代码规范的操作（保存时，提交时)"></a>选择检测代码规范的操作（保存时，提交时)</h5><blockquote><p>我选择的是保存时</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200423.png" alt="代码检查时机"></p><h5 id="选择将这些配置文件写入到什么地方"><a href="#选择将这些配置文件写入到什么地方" class="headerlink" title="选择将这些配置文件写入到什么地方"></a>选择将这些配置文件写入到什么地方</h5><blockquote><p>单独创建还是全部写在package.json 里面</p><p>In dedicated config files 单独创建</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200543.png" alt="配置文件写入地方"></p><h5 id="是否保存这份预设配置"><a href="#是否保存这份预设配置" class="headerlink" title="是否保存这份预设配置"></a>是否保存这份预设配置</h5><blockquote><p>如果选择，下次创建一个vue项目，可以直接使用这个预设文件，而无需再进行配置。</p><p>根据个人选择</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200841.png" alt="是否保存预设"></p><h3 id="VITE-创建项目"><a href="#VITE-创建项目" class="headerlink" title="VITE 创建项目"></a>VITE 创建项目</h3><h4 id="使用-vite-cli-命令"><a href="#使用-vite-cli-命令" class="headerlink" title="使用 vite-cli 命令"></a>使用 vite-cli 命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># pnpm</span><br><span class="line">pnpm create vite</span><br><span class="line"></span><br><span class="line"># npm</span><br><span class="line">npm init vite@latest</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><h4 id="输入项目名"><a href="#输入项目名" class="headerlink" title="输入项目名"></a>输入项目名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Project name:  vitecreate</span><br></pre></td></tr></table></figure><h4 id="选择一个框架（vue）"><a href="#选择一个框架（vue）" class="headerlink" title="选择一个框架（vue）"></a>选择一个框架（vue）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">? Select a framework: » - Use arrow-keys. Return to submit.</span><br><span class="line">     vanilla // 原生js</span><br><span class="line"> &gt;   vue     // 默认就是 vue3</span><br><span class="line">     react   // react</span><br><span class="line">     preact  // 轻量化react框架</span><br><span class="line">     lit     // 轻量级web组件</span><br><span class="line">     svelte  // svelte框架</span><br><span class="line">     Others  // 其他</span><br></pre></td></tr></table></figure><h4 id="选择ts或者js"><a href="#选择ts或者js" class="headerlink" title="选择ts或者js"></a>选择ts或者js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select a variant: » - Use arrow-keys. Return to submit.</span><br><span class="line">&gt;   JavaScript</span><br><span class="line">    TypeScript </span><br><span class="line">    Customize with create-vue ↗ //使用create-vue进行定制</span><br><span class="line">    Nuxt ↗</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vitecreate &amp;&amp; pnpm install &amp;&amp; pnpm run dev</span><br></pre></td></tr></table></figure><h4 id="快速初始化（建议使用）"><a href="#快速初始化（建议使用）" class="headerlink" title="快速初始化（建议使用）"></a>快速初始化（建议使用）</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pnpm</span></span><br><span class="line">pnpm create vite project-name -- --<span class="keyword">template</span> vue-ts</span><br><span class="line"></span><br><span class="line"><span class="meta"># npm 6.x</span></span><br><span class="line">npm init vite@latest project-name --<span class="keyword">template</span> vue-ts</span><br><span class="line"> </span><br><span class="line"><span class="meta"># npm 7+, 需要额外的双横线：</span></span><br><span class="line">npm init vite@latest project-name -- --<span class="keyword">template</span> vue-ts</span><br><span class="line"> </span><br><span class="line"><span class="meta"># yarn</span></span><br><span class="line">yarn create vite project-name --<span class="keyword">template</span> vue-ts</span><br></pre></td></tr></table></figure><h3 id="Vite和Cli优缺点"><a href="#Vite和Cli优缺点" class="headerlink" title="Vite和Cli优缺点"></a>Vite和Cli优缺点</h3><ul><li>cli</li></ul><div class="table-container"><table><thead><tr><th>Vue Cli优点</th><th>Vue Cli缺点</th></tr></thead><tbody><tr><td>生态好，应用实际项目多</td><td>开发环境慢，体验差</td></tr><tr><td>可以和Vue2.x，Vue3.x结合</td><td>只支持Vue</td></tr><tr><td>直接解析各种类型代码依赖</td><td>产物冗余代码多</td></tr><tr><td>构建配置项丰富，插件全</td></tr></tbody></table></div><ul><li>vite</li></ul><div class="table-container"><table><thead><tr><th>Vite优点</th><th>Vite缺点</th></tr></thead><tbody><tr><td>开发环境速度快，体验好</td><td>只针对ES6浏览器</td></tr><tr><td>支持Vue，React等</td><td>脚手架不包括Vuex，Router等</td></tr><tr><td>产物简洁清晰</td></tr></tbody></table></div><ul><li><a href="https://cn.vitejs.dev/">Vite官方文档</a></li><li><a href="https://cli.vuejs.org/zh/">Vue-cli 官方文档</a></li><li>官方文档推荐使用Vite构建Vue项目</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 常用命令</title>
      <link href="/post/6370f8cd.html"/>
      <url>/post/6370f8cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><div class="table-container"><table><thead><tr><th>选择使用某个数据库</th><th>use 数据库名;</th></tr></thead><tbody><tr><td>创建数据库</td><td>create database 数据库名字;</td></tr><tr><td>创建数据库并且指定字符编码</td><td>create database 数据库名字 charset=utf8;</td></tr><tr><td>查看有哪些数据库</td><td>show databases;</td></tr><tr><td>删除数据库</td><td>drop database 数据库名字;</td></tr><tr><td>查看当前使用的是哪个数据库</td><td>select database();</td></tr><tr><td>查看mysql数据库的版本号</td><td>select version();</td></tr><tr><td>导入数据库表（先进到某个数据库下）</td><td>source 文件路径; （路径不要出现中文）</td></tr><tr><td>查看某个数据库下有哪些表</td><td>show tables;</td></tr><tr><td>查看表的结构</td><td>desc 表名; //第一列都是字段名</td></tr></tbody></table></div><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前版本号</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line">-- 查看当前</span><br><span class="line"></span><br><span class="line">-- 查看当前有哪些数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- 指定数据库</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">-- 查看当前使用那个数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4   </span><br><span class="line"></span><br><span class="line">-- 查看当前数据库下的表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 查看当前表结构</span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">--  删除数据库</span><br><span class="line">drop database school;</span><br></pre></td></tr></table></figure><h2 id="数据表相关"><a href="#数据表相关" class="headerlink" title="数据表相关"></a>数据表相关</h2><div class="table-container"><table><thead><tr><th style="text-align:center">创建表</th><th style="text-align:center">create table 表名(<br />字段名 数据类型,<br />字段名 数据类型<br />)engine=innodb default charset=utf8mb4;</th></tr></thead><tbody><tr><td style="text-align:center">查看表结构</td><td style="text-align:center">desc 表名;</td></tr><tr><td style="text-align:center">查看所有表</td><td style="text-align:center">show tables;</td></tr><tr><td style="text-align:center">删除表</td><td style="text-align:center">drop table 表名;(drop table if exists 表名;(判断是否有该表如果有就删除没有就不删除))</td></tr><tr><td style="text-align:center">查看建表语句</td><td style="text-align:center">show create table 表名;</td></tr><tr><td style="text-align:center">建表时指定表的存储引擎</td><td style="text-align:center">ENGINE来指定存储引擎；CHARSET来指定这张表的字符编码方式。</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ; -- 指定存储引擎</span><br><span class="line">-- 查看表结构</span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">-- 查看该数据库所有表</span><br><span class="line">show tables;</span><br><span class="line">### 指定存储引擎</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表数据的增删改查等相关命令"><a href="#表数据的增删改查等相关命令" class="headerlink" title="表数据的增删改查等相关命令"></a>表数据的增删改查等相关命令</h2><h3 id="查询一个、多个、所有字段"><a href="#查询一个、多个、所有字段" class="headerlink" title="查询一个、多个、所有字段"></a>查询一个、多个、所有字段</h3><div class="table-container"><table><thead><tr><th>查询一个字段(列)</th><th>select 字段名 from 表名; //字段也就是列，那一列的内容</th></tr></thead><tbody><tr><td>查询多个字段</td><td>select 字段名1,字段名2,字段名3 from 表名; //中间用逗号隔开</td></tr><tr><td>查询所有字段</td><td>方式1：select * from 表名;</td></tr><tr><td>查询所有字段</td><td>方式2：select 字段名1,字段2…. from 表名;</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;王二&#x27;),(3,&#x27;王五&#x27;),(4,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询多个字段</span><br><span class="line">select id from student;</span><br><span class="line"></span><br><span class="line">-- 查询所有</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">-- 查询所有</span><br><span class="line">select id as &#x27;学号&#x27; ,stu_name as &#x27;姓名&#x27; from student;</span><br></pre></td></tr></table></figure><h3 id="列-字段-起别名和参与数学运算"><a href="#列-字段-起别名和参与数学运算" class="headerlink" title="列(字段)起别名和参与数学运算"></a>列(字段)起别名和参与数学运算</h3><div class="table-container"><table><thead><tr><th>列(字段)起别名</th><th>select 字段名 as 新名字 from 表名; 注意：as只作用于左边那一个字段。as可以用空格代替;起的别名有空格，要用单引号。别名是中文要用单引号括起来；新版已经不需要括起来了。</th></tr></thead><tbody><tr><td>字段(列)参与数学运算</td><td>例如：select 字段名*12 from 表名; //注意：只作用于那次查询，不会对源数据修改。//结论：字段可以使用数学表达式！</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;王二&#x27;),(3,&#x27;王五&#x27;),(4,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">-- 示例</span><br><span class="line">select id*20 from student;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.staro.cc/blog/posts/2212/20221206163933.png" alt="结果"></p><h3 id="条件查询和多字段排序"><a href="#条件查询和多字段排序" class="headerlink" title="条件查询和多字段排序"></a>条件查询和多字段排序</h3><div class="table-container"><table><thead><tr><th>条件查询</th><th>select 字段n from 表名 where 条件; 注意条件有： = , !=,&lt;&gt; , &lt; , &lt;= , &gt; , &gt;= , between…and\等同于&lt;=and&lt;= , is null\is not null , and , or , in , not , like</th></tr></thead><tbody><tr><td>多个字段排序</td><td>select 字段名 from 表名 order by 要排序的字段名 排序方式 , 要排序的字段名 排序方式; 注意：排序字段名在前，起主导，只有前面的相等的时候，才会考虑启用后面的排序</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 多个字段排序 </span><br><span class="line">select * from student order by id desc,age asc;</span><br><span class="line">-- between…and</span><br><span class="line">select * from student where age between 20 and 22;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">!=，&lt;&gt;</td><td style="text-align:center">都是不等于</td></tr><tr><td style="text-align:center">&gt;，&gt;=</td><td style="text-align:center">大于，大于等于</td></tr><tr><td style="text-align:center">&lt;，&lt;=</td><td style="text-align:center">小于,小于等于</td></tr><tr><td style="text-align:center">between…and</td><td style="text-align:center">相当于a&lt;=and&lt;=b(select * from student where age between 20 and 22)</td></tr><tr><td style="text-align:center">is null</td><td style="text-align:center">值为null（空）</td></tr><tr><td style="text-align:center">is not null</td><td style="text-align:center">值不为null（空）</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">逻辑运算符，两边为true结果为true</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">逻辑运算符，一边为true结果为true</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">包含(select * from student where age in (20,21,22))</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">取反，可以配合着用(not in, not between 1 and 2, not link ‘%1%’ ，is not null等 )</td></tr><tr><td style="text-align:center">like</td><td style="text-align:center">模糊匹配(select * from student where stu_name like ‘张%’)</td></tr></tbody></table></div><h3 id="insert-插入数据"><a href="#insert-插入数据" class="headerlink" title="insert 插入数据"></a>insert 插入数据</h3><div class="table-container"><table><thead><tr><th>insert 插入数据</th><th>insert into 表名(字段名1,字段名2,字段名3…) values(值1,值2,值3);注意：字段名和值要一一对应。什么是一一对应？数量要对应。数据类型要对应。//注意：除了数字，其他都要加单引号</th></tr></thead><tbody><tr><td>insert 插入多条数据</td><td>语法：insert into 表名(字段名1,字段名2) values(),(),(),();</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="update修改数据"><a href="#update修改数据" class="headerlink" title="update修改数据"></a>update修改数据</h3><div class="table-container"><table><thead><tr><th>update修改数据</th><th>update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3… where 条件;注意：没有条件限制会导致所有数据全部更新。</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">update student set age=20 where id = 1;</span><br></pre></td></tr></table></figure><h3 id="delete删除数据"><a href="#delete删除数据" class="headerlink" title="delete删除数据"></a>delete删除数据</h3><div class="table-container"><table><thead><tr><th>delete删除数据</th><th>delete from 表名 where 条件;注意：没有条件，整张表的数据会全部删除！</th></tr></thead><tbody><tr><td>快速删除表中的数据</td><td>truncate table 表名;</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">delete from student where id = 1;</span><br></pre></td></tr></table></figure><h3 id="约束相关命令"><a href="#约束相关命令" class="headerlink" title="约束相关命令"></a>约束相关命令</h3><div class="table-container"><table><thead><tr><th>非空约束</th><th>not null</th></tr></thead><tbody><tr><td>唯一性约束</td><td>unique</td></tr><tr><td>主键约束（主键值：是当前行数据的唯一标识、是当前行数据的身份证号）</td><td>primary key （简称PK）</td></tr><tr><td>外键约束（外键约束主要用来维护两个表之间数据的一致性。）</td><td>foreign key（简称FK）</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">    -- 指定主键约束 给某个字段添加主键约束之后，该字段不能重复也不能为空</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;, </span><br><span class="line">    -- 非空约束 用not null约束的字段不能为null值，必须给定具体的数据</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;, </span><br><span class="line">    -- 唯一约束 unique约束的字段，具有唯一性，不可重复，但可以为null</span><br><span class="line">    card varchar(18) unique comment &#x27;身份证&#x27;, </span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;，</span><br><span class="line">    c_id int(10) primary key comment &#x27;班号&#x27;, </span><br><span class="line">    -- 外键：foreign key(当前表字段) references 被引用的外键表(被引用的外键表的字段)</span><br><span class="line">    foreign key(c_id) references t_class(c_id)</span><br><span class="line">)engine=innodb default charset=utf8mb4 comment &#x27;学生表&#x27;;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">create table class(</span><br><span class="line">c_id int(10) primary key comment &#x27;班号&#x27;, </span><br><span class="line">c_name varchar(10) not null comment &#x27;班级名称&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 comment &#x27;班级表&#x27;;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>外键值可以为null</li><li>外键字段去引用一张表的某个字段的时候，被引用的字段必须具有unique约束</li><li>有了外键引用之后，表分为父表和子表<ul><li>班级表：父表</li><li>学生表：子表</li></ul></li><li>创建先创建父表</li><li>删除先删除子表数据</li><li>插入先插入父表数据</li></ul><h3 id="单行处理函数相关命令"><a href="#单行处理函数相关命令" class="headerlink" title="单行处理函数相关命令"></a>单行处理函数相关命令</h3><div class="table-container"><table><thead><tr><th>单行处理函数</th><th>使用方法 也可以用在where条件里面</th></tr></thead><tbody><tr><td>lower 转换成小写</td><td>select lower(字段名) from 表名;</td></tr><tr><td>upper 转换成大写</td><td>select upper(字段名) from 表名;</td></tr><tr><td>substr 取子串</td><td>select substr(被截取的字符串 ,起始下标,截取长度) from 表名 ;//注意：起始下标从1开始。</td></tr><tr><td>concat 字符串拼接</td><td>select concat(字段名,字段名) from 表名;</td></tr><tr><td>length 获取长度</td><td>select length(字段名) from 表名;</td></tr><tr><td>format 设置千分位</td><td>format(数字, ‘格式’) 例如:select ename,format(sal, ‘$999,999’) as sal from emp;</td></tr><tr><td>round 四舍五入</td><td>ect round(字段名,0) from 表名; //可以不写字段名写数字，那么它就对这个数字进行四舍五入，而且还是借助表名的结构输出。后面是0表示保留一位小数，2表示保留两位小数，-1表示保留到十位，-2保留到百位依次后推。</td></tr><tr><td>rand 生成随机数</td><td>select round() from 表名; //生成随机数</td></tr><tr><td>100以内的随机数</td><td>select round(rand()*100,0);</td></tr><tr><td>ifnull() 将null转为具体的值。只要有null参与的数学运算，结果一定是null</td><td>ifnull(数据,被当做哪个值) 如果数据为null，把这个数据当做哪个值。</td></tr></tbody></table></div><h3 id="多行处理函数（分组函数）相关命令"><a href="#多行处理函数（分组函数）相关命令" class="headerlink" title="多行处理函数（分组函数）相关命令"></a>多行处理函数（分组函数）相关命令</h3><div class="table-container"><table><thead><tr><th>多行处理函数(分组函数)</th><th>也就是说一列数据 输出一个值。</th></tr></thead><tbody><tr><td>sun 求和</td><td>select sun(字段) from 表名; //输出这个字段的和</td></tr><tr><td>max 最大值</td><td>select max(字段) from 表名; //输出这个字段的最大值</td></tr><tr><td>min 最小值</td><td>select min(字段) from 表名; //输出这个字段的最小值</td></tr><tr><td>avg 平均值</td><td>select avg(字段) from 表名; //输出这个字段的平均值</td></tr><tr><td>count 计数</td><td>select count(字段) from 表名; //输出这个字段的数据(也就是有多少行)的数量</td></tr></tbody></table></div><h3 id="分组查询等相关命令"><a href="#分组查询等相关命令" class="headerlink" title="分组查询等相关命令"></a>分组查询等相关命令</h3><div class="table-container"><table><thead><tr><th>分组查询</th><th>select 字段… from 表名 group by 要分组的字段; //在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</th></tr></thead><tbody><tr><td>联合分组查询</td><td>select 字段… from 表名 group by 要分组的字段1,字段2; //两个字段联合成1个字段看。（两个字段联合分组）</td></tr><tr><td>having 分组后再过滤</td><td>使用having可以对分完组之后的数据进一步过滤。having不能单独使用，having不能代替where，having必须和group by联合使用。优化策略：where和having，优先选择where，where实在完成不了了，再选择having。having 是跟 group by后面用的，可以用分组函数。where后面可不能用。例如：select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2500;</td></tr><tr><td>distinct去重</td><td>distinct只能出现在所有字段的最前方distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。例如:select distinct job from emp;select distinct job,deptno from emp;错误写法： select ename,distinct job from emp; distinct只能出现在所有字段的最前方</td></tr></tbody></table></div><h3 id="连接查询，多表联查等相关命令"><a href="#连接查询，多表联查等相关命令" class="headerlink" title="连接查询，多表联查等相关命令"></a>连接查询，多表联查等相关命令</h3><div class="table-container"><table><thead><tr><th>连接查询 内连接</th><th>select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno; //join连接的意思 ，on是连接条件</th></tr></thead><tbody><tr><td>连接查询 外连接</td><td>select e.ename,d.dname from dept d left join emp e on e.deptno = d.deptno; //left 是join左边的表是主表。right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</td></tr><tr><td>多表联查</td><td>语法：select … from a join b on a和b的连接条件 join c on a和c的连接条件 right join d on a和d的连接条件；//一条SQL中内连接和外连接可以混合。都可以出现！</td></tr><tr><td>union合并查询结果集</td><td>例如：select ename,job from emp where job = ‘MANAGER’ union select ename,job from emp where job = ‘SALESMAN’; //要求：结果集合并时列和列的数据类型也要一致。</td></tr><tr><td>limit取出部分数据</td><td>完整用法：limit startIndex, length; // startIndex是起始下标，length是长度。起始下标从0开始。缺省用法：limit 5; 这是取前5。例如：select ename,sal from emp order by sal desc limit 2, 3;</td></tr><tr><td>通用分页查询公式</td><td>limit (pageNo-1)*pageSize , pageSize //pagNo是第多少页 pageSize是每行显示多少条数据</td></tr></tbody></table></div><h3 id="事务相关的命令"><a href="#事务相关的命令" class="headerlink" title="事务相关的命令"></a>事务相关的命令</h3><div class="table-container"><table><thead><tr><th>关闭自动提交事务</th><th>start transaction</th></tr></thead><tbody><tr><td>提交事务</td><td>commit</td></tr><tr><td>事务回滚</td><td>rollback</td></tr><tr><td>查看隔离级别</td><td>SELECT @@tx_isolation //注意：新版mysql 应该换语句了</td></tr><tr><td>修改隔离级别</td><td>set global transaction isolation level 级别名;</td></tr></tbody></table></div><h3 id="索引创建与删除"><a href="#索引创建与删除" class="headerlink" title="索引创建与删除"></a>索引创建与删除</h3><div class="table-container"><table><thead><tr><th>索引的创建</th><th>例：create index emp_ename_index on emp(ename);// 给emp表的ename字段添加索引，起名：emp_ename_index</th></tr></thead><tbody><tr><td>索引的删除</td><td>例：drop index emp_ename_index on emp;//将emp表上的emp_ename_index索引对象删除。</td></tr><tr><td>查看一个SQL语句是否使用了索引进行检索</td><td>explain select * from emp where ename = ‘KING’;//在sql语句前面添加explain</td></tr></tbody></table></div><h3 id="视图对象的创建与删除"><a href="#视图对象的创建与删除" class="headerlink" title="视图对象的创建与删除"></a>视图对象的创建与删除</h3><div class="table-container"><table><thead><tr><th>创建视图对象</th><th>create view 视图对象的名字 as select * from 表名;</th></tr></thead><tbody><tr><td>删除视图对象</td><td>drop view 视图对象的名字;</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> SQL笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Markdown 自定义代码片段</title>
      <link href="/post/1199d4f7.html"/>
      <url>/post/1199d4f7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写博客的时候，觉得如果每一篇博客都要写头顶上的title,date…. 等信息的话会很繁琐,想到vscode 有自定义的代码缩写功能，在网上找了一下决定记录一下。</p></blockquote><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>快速构建一些繁琐且具有一定常用性的语句</li></ul><h1 id="自定义代码片段"><a href="#自定义代码片段" class="headerlink" title="自定义代码片段"></a>自定义代码片段</h1><p>打开文件-&gt;首选项-&gt;配置用户代码片段(点击)<br><details class="folding-tag" ><summary> 图示 </summary>              <div class='content'>              <p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163710.png" alt="打开代码片段"></p>              </div>            </details></p><p>选择Markdwon.json 或者 搜索 Markdwon.json<br>或者选择新建全局代码片段文件(最好选择Markdwon.json)</p><details class="folding-tag" ><summary> 图示 </summary>              <div class='content'>              <p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163725.png" alt="打开代码片段"></p>              </div>            </details><div class="table-container"><table><thead><tr><th>代码</th><th>示意</th></tr></thead><tbody><tr><td>scope</td><td>字段中填写以逗号分隔的作用域 Id，如果 scope 字段为空或根本没有设置，那么将适用于所有语言。(如果选择的是Markdown.json的话不用写这个)</td></tr><tr><td>prefix</td><td>是用于触发代码片段的一段文字，当你输入这个文字的时候，你将可以展开这个代码片段的内容并将其插入。</td></tr><tr><td>body</td><td>你可以使用 $1 $2 来作为按下 Tab 时将切换的键盘焦点区域，$0 是插入完成后最终光标所在的位置。你也可以使用 ${1:label} 或 ${2:another} 这样的方式来增加占位符，同样 Id 的占位符将会自动关联起来。</td></tr><tr><td>description</td><td>代码解释，没多少用，但是写着方便以后查看</td></tr></tbody></table></div><details class="folding-tag" ><summary> 代码与图示 </summary>              <div class='content'>              <div class="tabs" id="代码与图示"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码与图示-1">代码</button></li><li class="tab"><button type="button" data-href="#代码与图示-2">图示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码与图示-1"><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;blog header info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;---&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;title: \&quot;$&#123;1:在此处添加标题&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;date: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;updated: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;copyright_author: Star &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;copyright_url:  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;description: $&#123;2:笔记描述&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;categories: $&#123;3|后端笔记,前端笔记,SQL笔记,工具笔记,算法笔记,计算机笔记,其他笔记|&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;tags: $&#123;4|JAVA,Mysql,Springboot,Linux,计算机基础,算法|&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;---&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;0:在此处编辑  的博客摘要&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdown 头部信息模版&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码与图示-2"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163739.png" alt="代码解释图"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="打开Markdown自定义补全功能"><a href="#打开Markdown自定义补全功能" class="headerlink" title="打开Markdown自定义补全功能"></a>打开Markdown自定义补全功能</h1><p>文件-&gt;首选项-&gt;设置-&gt;(右上角)打开设置，将下面这段设置写入setting.json文件</p><details class="folding-tag" ><summary> 自定义补全代码与步骤示图 </summary>              <div class='content'>              <div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs2-1">代码</button></li><li class="tab"><button type="button" data-href="#tabs2-2">图示1</button></li><li class="tab"><button type="button" data-href="#tabs2-3">图示2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs2-1"><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-2"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163754.png" alt="图示1"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-3"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163805.png" alt="图示2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="关于代码片段编写的更多细节"><a href="#关于代码片段编写的更多细节" class="headerlink" title="关于代码片段编写的更多细节"></a>关于代码片段编写的更多细节</h1><h2 id="关于文件名称"><a href="#关于文件名称" class="headerlink" title="关于文件名称"></a>关于文件名称</h2><p>在阅读前面的博客内容时，你可能注意到了：添加全局代码片段的时候，文件扩展名为 .code-snippets，例如 blog.code-snippets；添加语言特定的代码片段的时候，扩展名为 .json，如 markdown.json。这个规则无论在全局还是在工作区，都是一样适用的。</p><h2 id="光标停留点（Tabstop）"><a href="#光标停留点（Tabstop）" class="headerlink" title="光标停留点（Tabstop）"></a>光标停留点（Tabstop）</h2><details class="folding-tag" ><summary> 光标停留点 </summary>              <div class='content'>              <p>使用 $1 $2 这些可以作为按下 Tab 键时的光标停留位置，而 $0 无论出现在代码片段的哪个地方，都会是最后一个光标位置。</p>              </div>            </details><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><details class="folding-tag" ><summary> 占位符 </summary>              <div class='content'>              <p>${1:占位符 Id} 可以表示一个占位符。当你插入此代码片段的时候，会出现 占位符 Id 字样，然后光标会选中这几个字以便你进行修改。</p><p>占位符可以嵌套，例如 ${1:walterlv 的 ${2:嵌套占位符}}。这时，光标会首先选中所有的文字，随后按下 Tab 之后选中后面那一部分。</p><p>在前面那个比较复杂的博客代码片段中，${1:在此处添加标题} 就是一个占位符，而 ${0:在此处编辑 blog.walterlv.com 的博客摘要} 就是光标的最终停留点。</p>              </div>            </details><h2 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h2><details class="folding-tag" ><summary> 下拉选项 </summary>              <div class='content'>              <p>使用 ${1|选项 1,选项 2,选项 3|} 可以创建三个选项的下拉框。</p><p>在前面的博客代码片段中，${2|dotnet,csharp,uwp|} 就是一个下拉选框，帮助我选择常用的一些博客类别。</p>              </div>            </details><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><details class="folding-tag" ><summary> 变量 </summary>              <div class='content'>              <p>使用 $变量名 或者 ${变量名:变量的默认值} 可以创建变量。</p><p>在 Visual Studio Code 中，你有这些变量可以使用：</p><p>-TM_SELECTED_TEXT - 在插入代码片段的时刻选中的文本 -TM_CURRENT_LINE - 在插入代码片段的时刻光标所在的行 -TM_CURRENT_WORD - 在插入代码片段的时刻光标所在的词 -TM_LINE_INDEX - 在插入代码片段的时刻的行号（0 为首行） -TM_LINE_NUMBER - 当前文档的总行数 -TM_FILENAME - 当前文档的文件名称 -TM_FILENAME_BASE - 当前文档不含扩展名的名称 -TM_DIRECTORY - 当前文档所在的文件夹 -TM_FILEPATH - 当前文档的完全路径 -CLIPBOARD - 剪贴板中的内容 -CURRENT_YEAR - 年 -CURRENT_YEAR_SHORT - 两位数字显示的年 -CURRENT_MONTH - 月，如 02 -CURRENT_MONTH_NAME - 月的英文名称，如 July -CURRENT_MONTH_NAME_SHORT - 月的英文缩写，如 Jul -CURRENT_DATE - 日 -CURRENT_DAY_NAME - 星期的英文名称，如 Monday -CURRENT_DAY_NAME_SHORT - 星期的英文缩写，如 Mon -CURRENT_HOUR - 24 小时制的时 -CURRENT_MINUTE - 分 -CURRENT_SECOND - 秒</p><p>所以在上面比较复杂的博客模板中，我们可以直接插入当前的时间 ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} +0800。</p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 工具笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
