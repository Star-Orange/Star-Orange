<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker 基础命令</title>
      <link href="/post/docker-basicsOrder.html"/>
      <url>/post/docker-basicsOrder.html</url>
      
        <content type="html"><![CDATA[<h2 id="docker-介绍"><a href="#docker-介绍" class="headerlink" title="docker 介绍"></a>docker 介绍</h2><h3 id="docker-是什么？"><a href="#docker-是什么？" class="headerlink" title="docker 是什么？"></a>docker 是什么？</h3><ul><li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 提供的 CGroup 功能和 namespace 来实现的，以及 AUFS 类的 <strong>UnionFS</strong> 等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。</li><li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li><li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样</strong></li></ul><hr><h3 id="为什么要用docker？"><a href="#为什么要用docker？" class="headerlink" title="为什么要用docker？"></a>为什么要用docker？</h3><ol><li>一致的运行环境：<em>docker 提供完整的运行时环境，确保应用运行环境一致</em></li><li>更快的启动时间</li><li>隔离性</li><li>迁移方便</li></ol><hr><h2 id="docker-基本概念"><a href="#docker-基本概念" class="headerlink" title="docker 基本概念"></a>docker 基本概念</h2><p><strong>Docker 中有非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。</strong></p><ul><li><strong>镜像（Image）</strong></li><li><strong>容器（Container）</strong></li><li><strong>仓库（Repository）</strong></li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期</p><p><strong>从仓库—&gt;拉取—&gt;镜像，通过镜像—&gt;创建—&gt;容器</strong></p><h3 id="镜像（Image）"><a href="#镜像（Image）" class="headerlink" title="镜像（Image）"></a>镜像（Image）</h3><blockquote><ul><li><p>当我们需要部署和运行应用程序时，通常需要预先安装并配置各种软件环境、库和依赖。这个过程十分繁琐且容易出错，而 Docker 镜像的出现为我们提供了一种解决方案。</p></li><li><p>Docker 镜像是 Docker 容器的基础，它是一个轻量级的、可执行的、可移植的容器打包文件，包含了运行应用程序所需的所有代码、库、配置文件和依赖项。</p></li><li>Docker 镜像采用分层的存储方式，每一层都是只读的，并且具有唯一的 ID。</li></ul></blockquote><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 (Container)"></a>容器 (Container)</h3><blockquote><ul><li>它是 Docker 镜像的实例化运行态，具有轻量、可移植、可扩展等优势</li><li>Docker 容器是 Docker 镜像的实例，可以理解为一个可运行的进程。</li></ul></blockquote><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库 (Repository)"></a>仓库 (Repository)</h3><blockquote><ul><li>Docker 仓库是用于存储和管理 Docker 镜像的中心化存储库。</li><li>Docker Hub 是官方的公共 Docker 镜像仓库，提供了大量的开源镜像，也支持私有仓库。</li></ul></blockquote><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><blockquote><ul><li><p><a href="https://juejin.cn/post/6844903829683568647">docker常用命令</a></p></li><li><p><a href="https://yeasy.gitbook.io/docker_practice/">docker 从入门到实战</a></p></li><li><a href="https://juejin.cn/post/6844903958046048264">Docker 三要素 ：镜像、容器和仓库</a></li><li><a href="https://www.jianshu.com/p/adaa34795e64">Docker 常用命令与操作</a></li><li><a href="https://juejin.cn/post/6913568633813729294">5分钟带你快速了解Docker和k8s</a></li></ul></blockquote><h3 id="服务相关"><a href="#服务相关" class="headerlink" title="服务相关"></a>服务相关</h3><ul><li><p>查看docker版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>关闭docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li><li><p>重启docker服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart</span><br></pre></td></tr></table></figure></li><li><p>关闭docker服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker stop</span><br></pre></td></tr></table></figure></li><li><p>日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br></pre></td></tr></table></figure></li><li><p>故障检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker status</span><br></pre></td></tr></table></figure></li><li><p>显示docker系统的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure></li><li><p>日志信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs</span><br></pre></td></tr></table></figure></li></ul><h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><h4 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker images -a</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [imagesId]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">移除本地全部镜像  docker images -a -q 查询全部 镜像<span class="built_in">id</span></span></span><br><span class="line">docker rmi `docker images -a -q`</span><br></pre></td></tr></table></figure><h4 id="查看指定镜像的创建历史"><a href="#查看指定镜像的创建历史" class="headerlink" title="查看指定镜像的创建历史"></a>查看指定镜像的创建历史</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [id]</span><br></pre></td></tr></table></figure><h4 id="指定镜像保存成-tar-归档文件，-docker-load-的逆操作"><a href="#指定镜像保存成-tar-归档文件，-docker-load-的逆操作" class="headerlink" title="指定镜像保存成 tar 归档文件， docker load 的逆操作"></a>指定镜像保存成 tar 归档文件， docker load 的逆操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save</span><br><span class="line"><span class="comment"># 将镜像 jdk:8 保存为 jdk8.tar 文件</span></span><br><span class="line">docker save -o jdk8.tar jdk:8</span><br></pre></td></tr></table></figure><h4 id="从-tar-镜像归档中载入镜像，-docker-save-的逆操作"><a href="#从-tar-镜像归档中载入镜像，-docker-save-的逆操作" class="headerlink" title="从 tar 镜像归档中载入镜像， docker save 的逆操作"></a>从 tar 镜像归档中载入镜像， docker save 的逆操作</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker load</span><br><span class="line"><span class="comment"># 上面命令的意思是将 jdk8.tar 文件载入镜像中</span></span><br><span class="line">docker load -i jdk8.tar</span><br><span class="line">docker load &lt; /home/jdk8.tar</span><br></pre></td></tr></table></figure><h4 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker search</span><br><span class="line"><span class="comment"># 搜索处收藏数不小于 3 ，并且能够自动化构建的  jdk 镜像，并且完整显示镜像描述</span></span><br><span class="line">docker search -s 3 --automated --no-trunc jdk</span><br><span class="line">docker pull</span><br><span class="line"><span class="comment"># 拉取jdk最新的镜像</span></span><br><span class="line">docker pull ubuntu:latest</span><br></pre></td></tr></table></figure><h4 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h4><h5 id="options-说明"><a href="#options-说明" class="headerlink" title="options 说明"></a>options 说明</h5><div class="table-container"><table><thead><tr><th style="text-align:center">option</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">-i</td><td style="text-align:left">以交互模式运行容器，通常与 -t 同时使用</td></tr><tr><td style="text-align:center">-t</td><td style="text-align:left">启动容器后，为容器分配一个命令行，通常与 -i 同时使用</td></tr><tr><td style="text-align:center">-v</td><td style="text-align:left">目录映射，容器目录挂载到宿主机目录，格式： <host目录>:&lt;容器目录&gt;</td></tr><tr><td style="text-align:center">-d</td><td style="text-align:left">守护进程，后台运行该容器</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:left">指定端口映射，<strong>格式</strong>：主机(宿主)端口:容器端口</td></tr><tr><td style="text-align:center">-P</td><td style="text-align:left">随机端口映射，容器内部端口<strong>随机</strong>映射到主机的端口</td></tr><tr><td style="text-align:center">-u</td><td style="text-align:left">以什么用户身份创建容器</td></tr><tr><td style="text-align:center">—net  mynet –ip  172.20.0.6</td><td style="text-align:left">指定网段(mynet 是已经创建的网段名称) 分配mynet 范围内的ip</td></tr><tr><td style="text-align:center">-e , —env=[]</td><td style="text-align:left">指定环境变量，容器中可以使用该环境变量</td></tr><tr><td style="text-align:center">—name “nginx-lb”</td><td style="text-align:left">容器名字</td></tr><tr><td style="text-align:center">-m, —memory bytes</td><td style="text-align:left">设置容器使用内存最大值</td></tr><tr><td style="text-align:center">-h, —hostname string</td><td style="text-align:left">指定容器的 host name</td></tr><tr><td style="text-align:center">—dns 8.8.8.8</td><td style="text-align:left">指定容器 dns 服务器</td></tr><tr><td style="text-align:center">-e username=”ritchie”</td><td style="text-align:left">设置环境变量</td></tr><tr><td style="text-align:center">—privileged</td><td style="text-align:left">容器内是否使用真正的 root 权限</td></tr></tbody></table></div><ul><li>查看一下 是否看得懂 <a href="https://www.cnblogs.com/poloyy/p/13926296.html">参考地址-有命令解释</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name mq \</span><br><span class="line">--net mynet --ip 172.18.0.11 \</span><br><span class="line">-p 5672:5672 -m 500m \</span><br><span class="line">-e TZ=Asia/Shanghai --privileged=<span class="literal">true</span> \</span><br><span class="line">rabbitmq</span><br></pre></td></tr></table></figure><h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看正在运行的容器信息</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器的<span class="built_in">id</span>信息</span></span><br><span class="line">docker ps -a -q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看全部容器占用的空间</span></span><br><span class="line">docker ps -as</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">STATUS 运行状态</span><br><span class="line">Exited (退出的，未启动的)</span><br></pre></td></tr></table></figure><h4 id="检查镜像或者容器的参数"><a href="#检查镜像或者容器的参数" class="headerlink" title="检查镜像或者容器的参数"></a>检查镜像或者容器的参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查镜像或者容器的参数 ，默认返回 JSON 格式</span></span><br><span class="line">docker inspect [id or name]</span><br></pre></td></tr></table></figure><h4 id="查看一个正在运行容器进程"><a href="#查看一个正在运行容器进程" class="headerlink" title="查看一个正在运行容器进程"></a>查看一个正在运行容器进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看一个正在运行容器进程，支持 ps 命令参数</span></span><br><span class="line">docker top [id or name]</span><br></pre></td></tr></table></figure><h4 id="容器的启动和停止"><a href="#容器的启动和停止" class="headerlink" title="容器的启动和停止"></a>容器的启动和停止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器的启动和停止</span></span><br><span class="line">docker start|stop|restart [id or name]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动全部</span></span><br><span class="line">docker start  `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="容器的删除"><a href="#容器的删除" class="headerlink" title="容器的删除"></a>容器的删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器的删除</span></span><br><span class="line">docker rm [id or name]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除全部</span></span><br><span class="line">docker rm  `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="杀死容器进程"><a href="#杀死容器进程" class="headerlink" title="杀死容器进程"></a>杀死容器进程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 杀死一个或多个指定容器进程</span></span><br><span class="line">docker <span class="built_in">kill</span> -s KILL [<span class="built_in">id</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉全部运行的容器</span></span><br><span class="line">docker <span class="built_in">kill</span> -s KILL `docker ps -q`</span><br></pre></td></tr></table></figure><h4 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看容器日志</span></span><br><span class="line">docker <span class="built_in">log</span> [<span class="built_in">id</span> or name]</span><br></pre></td></tr></table></figure><h4 id="进入交互式容器"><a href="#进入交互式容器" class="headerlink" title="进入交互式容器"></a>进入交互式容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -i &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -t &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line">docker <span class="built_in">exec</span> -d &#123;&#123;containerName or containerID&#125;&#125; bash</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it ss /bin/bash -c <span class="string">&#x27;cd /root/ss/ShardingSphere/bin &amp;&amp; ./start.sh&#x27;</span></span><br><span class="line">这个命令在名为 `ss` 的容器中启动了一个交互式 shell，并在该 shell 中执行了一些命令。`-i` 选项保持 STDIN 打开，`-t` 选项分配伪终端。`/bin/bash -c` 命令用于在 bash shell 中执行指定的命令。</span><br><span class="line">执行的命令是 `<span class="built_in">cd</span> /root/ss/ShardingSphere/bin &amp;&amp; ./start.sh`，它将当前目录更改为 `/root/ss/ShardingSphere/bin`，然后运行 `./start.sh` 脚本。</span><br></pre></td></tr></table></figure><ul><li><p>只用 <code>-i</code> 参数，由于没有分配伪终端，看起来像pipe执行一样。但是执行结果、命令返回值都可以正确获取 一般和t连用</p></li><li><p>只用 <code>-t</code> 参数，则可以看到一个 console 窗口，但是执行命令会发现由于没有获得stdin的输出，无法看到命令执行情况,一般和i连用</p></li><li><p>使用 <code>-it</code> 时，则和我们平常操作 console 界面类似，而且也<code>不会像attach方式因为退出，导致整个容器退出</code></p></li><li><p>使用 <code>-d</code> 参数，在后台执行一个进程。如果一个命令需要长时间进程，会很快返回</p></li></ul><h3 id="仓库相关"><a href="#仓库相关" class="headerlink" title="仓库相关"></a>仓库相关</h3><h4 id="登录到远程仓库"><a href="#登录到远程仓库" class="headerlink" title="登录到远程仓库"></a>登录到远程仓库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login [username] [password] <span class="comment"># 登录到一个registry</span></span><br></pre></td></tr></table></figure><ul><li><code>--password</code> 或 <code>-p</code>：密码</li><li><code>--password-stdin</code>：从标准输入中获取密码</li><li><code>--username</code> 或 <code>-u</code>：用户名</li></ul><h4 id="从registry仓库搜索镜像"><a href="#从registry仓库搜索镜像" class="headerlink" title="从registry仓库搜索镜像"></a>从registry仓库搜索镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 搜索处收藏数不小于 3 ，并且能够自动化构建的  jdk 镜像，并且完整显示镜像描述</span></span><br><span class="line">docker search -s 3 --automated --no-trunc jdk</span><br></pre></td></tr></table></figure><h4 id="从仓库下载镜像到本地"><a href="#从仓库下载镜像到本地" class="headerlink" title="从仓库下载镜像到本地"></a>从仓库下载镜像到本地</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull [name]:[vesion]</span><br><span class="line"><span class="comment"># 拉去jdk最新镜像</span></span><br><span class="line">docker pull jdk:latest</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(一)、创建Vue项目的两种方法</title>
      <link href="/post/c3bd9a63.html"/>
      <url>/post/c3bd9a63.html</url>
      
        <content type="html"><![CDATA[<h3 id="VUE-CLI创建项目"><a href="#VUE-CLI创建项目" class="headerlink" title="VUE-CLI创建项目"></a>VUE-CLI创建项目</h3><h4 id="全局安装-vue-cli"><a href="#全局安装-vue-cli" class="headerlink" title="全局安装@vue-cli"></a>全局安装@vue-cli</h4><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装 vue-cli脚手架</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-cli3-project[项目名称]</span><br></pre></td></tr></table></figure><h5 id="选择预设"><a href="#选择预设" class="headerlink" title="选择预设"></a>选择预设</h5><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212165733.png" alt="项目初始化"></p><h5 id="插件选择"><a href="#插件选择" class="headerlink" title="插件选择"></a>插件选择</h5><blockquote><p>选择 Babel、Router、Vuex、Css预处理器、Linter / Formatter 格式检查</p></blockquote><p><img src="http://cdn.staro.cc/blog/posts/2212/20221212170027.png" alt="插件选择"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Bable--&gt; 主要用于将采用 ECMAScript 2015+ 语法编写的代码转换为向后兼容的 JavaScript 语法</span><br><span class="line"></span><br><span class="line">TypeScript --&gt; js的超集</span><br><span class="line"></span><br><span class="line">Progressive Web App (PWA) Support --&gt; 提升 Web App 的性能（没用过）</span><br><span class="line"></span><br><span class="line">Router --&gt; 路由管理</span><br><span class="line"></span><br><span class="line">css preprocessor --&gt; css 预处理器</span><br><span class="line"></span><br><span class="line">Linter / Formatter --&gt; 格式检查</span><br><span class="line"></span><br><span class="line">Unit Testing --&gt; Unit 测试框架</span><br><span class="line"></span><br><span class="line">E2E Testing --&gt; E2E 测试</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="选择VUE版本"><a href="#选择VUE版本" class="headerlink" title="选择VUE版本"></a>选择VUE版本</h5><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212180700.png" alt="vue版本选择"></p><h5 id="路由模式选择"><a href="#路由模式选择" class="headerlink" title="路由模式选择"></a>路由模式选择</h5><blockquote><p>是否使用 <code>history</code>模式的路由  </p><p>No  主要是<a href="http://www.a.com/index#">http://www.a.com/index#</a> 和 <a href="http://www.a.com/index">http://www.a.com/index</a> 的区别</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212195215.png" alt="路由模式选择"></p><h5 id="选择一个css预处理器-Less"><a href="#选择一个css预处理器-Less" class="headerlink" title="选择一个css预处理器 (Less)"></a>选择一个css预处理器 (Less)</h5><blockquote><p>选择 Less</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212195457.png" alt="11"></p><h5 id="选择规范方案"><a href="#选择规范方案" class="headerlink" title="选择规范方案"></a>选择规范方案</h5><blockquote><p>vue-cli默认提供了几套规范，我选择了 ESLint 标准规范</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">? Pick a linter / formatter config:</span><br><span class="line">  ESLint with error prevention only</span><br><span class="line">  ESLint + Airbnb config</span><br><span class="line">&gt; ESLint + Standard config  # ESLint 标准规范方案</span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure><h5 id="选择检测代码规范的操作（保存时，提交时"><a href="#选择检测代码规范的操作（保存时，提交时" class="headerlink" title="选择检测代码规范的操作（保存时，提交时)"></a>选择检测代码规范的操作（保存时，提交时)</h5><blockquote><p>我选择的是保存时</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200423.png" alt="代码检查时机"></p><h5 id="选择将这些配置文件写入到什么地方"><a href="#选择将这些配置文件写入到什么地方" class="headerlink" title="选择将这些配置文件写入到什么地方"></a>选择将这些配置文件写入到什么地方</h5><blockquote><p>单独创建还是全部写在package.json 里面</p><p>In dedicated config files 单独创建</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200543.png" alt="配置文件写入地方"></p><h5 id="是否保存这份预设配置"><a href="#是否保存这份预设配置" class="headerlink" title="是否保存这份预设配置"></a>是否保存这份预设配置</h5><blockquote><p>如果选择，下次创建一个vue项目，可以直接使用这个预设文件，而无需再进行配置。</p><p>根据个人选择</p></blockquote><p><img src="https://cdn.staro.cc/blog/posts/2212/20221212200841.png" alt="是否保存预设"></p><h3 id="VITE-创建项目"><a href="#VITE-创建项目" class="headerlink" title="VITE 创建项目"></a>VITE 创建项目</h3><h4 id="使用-vite-cli-命令"><a href="#使用-vite-cli-命令" class="headerlink" title="使用 vite-cli 命令"></a>使用 vite-cli 命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># pnpm</span><br><span class="line">pnpm create vite</span><br><span class="line"></span><br><span class="line"># npm</span><br><span class="line">npm init vite@latest</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite</span><br></pre></td></tr></table></figure><h4 id="输入项目名"><a href="#输入项目名" class="headerlink" title="输入项目名"></a>输入项目名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">? Project name:  vitecreate</span><br></pre></td></tr></table></figure><h4 id="选择一个框架（vue）"><a href="#选择一个框架（vue）" class="headerlink" title="选择一个框架（vue）"></a>选择一个框架（vue）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">? Select a framework: » - Use arrow-keys. Return to submit.</span><br><span class="line">     vanilla // 原生js</span><br><span class="line"> &gt;   vue     // 默认就是 vue3</span><br><span class="line">     react   // react</span><br><span class="line">     preact  // 轻量化react框架</span><br><span class="line">     lit     // 轻量级web组件</span><br><span class="line">     svelte  // svelte框架</span><br><span class="line">     Others  // 其他</span><br></pre></td></tr></table></figure><h4 id="选择ts或者js"><a href="#选择ts或者js" class="headerlink" title="选择ts或者js"></a>选择ts或者js</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">? Select a variant: » - Use arrow-keys. Return to submit.</span><br><span class="line">&gt;   JavaScript</span><br><span class="line">    TypeScript </span><br><span class="line">    Customize with create-vue ↗ //使用create-vue进行定制</span><br><span class="line">    Nuxt ↗</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vitecreate &amp;&amp; pnpm install &amp;&amp; pnpm run dev</span><br></pre></td></tr></table></figure><h4 id="快速初始化（建议使用）"><a href="#快速初始化（建议使用）" class="headerlink" title="快速初始化（建议使用）"></a>快速初始化（建议使用）</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pnpm</span></span><br><span class="line">pnpm create vite project-name -- --<span class="keyword">template</span> vue-ts</span><br><span class="line"></span><br><span class="line"><span class="meta"># npm 6.x</span></span><br><span class="line">npm init vite@latest project-name --<span class="keyword">template</span> vue-ts</span><br><span class="line"> </span><br><span class="line"><span class="meta"># npm 7+, 需要额外的双横线：</span></span><br><span class="line">npm init vite@latest project-name -- --<span class="keyword">template</span> vue-ts</span><br><span class="line"> </span><br><span class="line"><span class="meta"># yarn</span></span><br><span class="line">yarn create vite project-name --<span class="keyword">template</span> vue-ts</span><br></pre></td></tr></table></figure><h3 id="Vite和Cli优缺点"><a href="#Vite和Cli优缺点" class="headerlink" title="Vite和Cli优缺点"></a>Vite和Cli优缺点</h3><ul><li>cli</li></ul><div class="table-container"><table><thead><tr><th>Vue Cli优点</th><th>Vue Cli缺点</th></tr></thead><tbody><tr><td>生态好，应用实际项目多</td><td>开发环境慢，体验差</td></tr><tr><td>可以和Vue2.x，Vue3.x结合</td><td>只支持Vue</td></tr><tr><td>直接解析各种类型代码依赖</td><td>产物冗余代码多</td></tr><tr><td>构建配置项丰富，插件全</td></tr></tbody></table></div><ul><li>vite</li></ul><div class="table-container"><table><thead><tr><th>Vite优点</th><th>Vite缺点</th></tr></thead><tbody><tr><td>开发环境速度快，体验好</td><td>只针对ES6浏览器</td></tr><tr><td>支持Vue，React等</td><td>脚手架不包括Vuex，Router等</td></tr><tr><td>产物简洁清晰</td></tr></tbody></table></div><ul><li><a href="https://cn.vitejs.dev/">Vite官方文档</a></li><li><a href="https://cli.vuejs.org/zh/">Vue-cli 官方文档</a></li><li>官方文档推荐使用Vite构建Vue项目</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql 常用命令</title>
      <link href="/post/6370f8cd.html"/>
      <url>/post/6370f8cd.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h2><div class="table-container"><table><thead><tr><th>选择使用某个数据库</th><th>use 数据库名;</th></tr></thead><tbody><tr><td>创建数据库</td><td>create database 数据库名字;</td></tr><tr><td>创建数据库并且指定字符编码</td><td>create database 数据库名字 charset=utf8;</td></tr><tr><td>查看有哪些数据库</td><td>show databases;</td></tr><tr><td>删除数据库</td><td>drop database 数据库名字;</td></tr><tr><td>查看当前使用的是哪个数据库</td><td>select database();</td></tr><tr><td>查看mysql数据库的版本号</td><td>select version();</td></tr><tr><td>导入数据库表（先进到某个数据库下）</td><td>source 文件路径; （路径不要出现中文）</td></tr><tr><td>查看某个数据库下有哪些表</td><td>show tables;</td></tr><tr><td>查看表的结构</td><td>desc 表名; //第一列都是字段名</td></tr></tbody></table></div><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 查看当前版本号</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line">-- 查看当前</span><br><span class="line"></span><br><span class="line">-- 查看当前有哪些数据库</span><br><span class="line">show databases;</span><br><span class="line"></span><br><span class="line">-- 创建数据库</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line"></span><br><span class="line">-- 指定数据库</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">-- 查看当前使用那个数据库</span><br><span class="line">select database();</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4   </span><br><span class="line"></span><br><span class="line">-- 查看当前数据库下的表</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">-- 查看当前表结构</span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">--  删除数据库</span><br><span class="line">drop database school;</span><br></pre></td></tr></table></figure><h2 id="数据表相关"><a href="#数据表相关" class="headerlink" title="数据表相关"></a>数据表相关</h2><div class="table-container"><table><thead><tr><th style="text-align:center">创建表</th><th style="text-align:center">create table 表名(<br />字段名 数据类型,<br />字段名 数据类型<br />)engine=innodb default charset=utf8mb4;</th></tr></thead><tbody><tr><td style="text-align:center">查看表结构</td><td style="text-align:center">desc 表名;</td></tr><tr><td style="text-align:center">查看所有表</td><td style="text-align:center">show tables;</td></tr><tr><td style="text-align:center">删除表</td><td style="text-align:center">drop table 表名;(drop table if exists 表名;(判断是否有该表如果有就删除没有就不删除))</td></tr><tr><td style="text-align:center">查看建表语句</td><td style="text-align:center">show create table 表名;</td></tr><tr><td style="text-align:center">建表时指定表的存储引擎</td><td style="text-align:center">ENGINE来指定存储引擎；CHARSET来指定这张表的字符编码方式。</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line"></span><br><span class="line">-- 创建表</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ; -- 指定存储引擎</span><br><span class="line">-- 查看表结构</span><br><span class="line">desc student;</span><br><span class="line"></span><br><span class="line">-- 查看该数据库所有表</span><br><span class="line">show tables;</span><br><span class="line">### 指定存储引擎</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表数据的增删改查等相关命令"><a href="#表数据的增删改查等相关命令" class="headerlink" title="表数据的增删改查等相关命令"></a>表数据的增删改查等相关命令</h2><h3 id="查询一个、多个、所有字段"><a href="#查询一个、多个、所有字段" class="headerlink" title="查询一个、多个、所有字段"></a>查询一个、多个、所有字段</h3><div class="table-container"><table><thead><tr><th>查询一个字段(列)</th><th>select 字段名 from 表名; //字段也就是列，那一列的内容</th></tr></thead><tbody><tr><td>查询多个字段</td><td>select 字段名1,字段名2,字段名3 from 表名; //中间用逗号隔开</td></tr><tr><td>查询所有字段</td><td>方式1：select * from 表名;</td></tr><tr><td>查询所有字段</td><td>方式2：select 字段名1,字段2…. from 表名;</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;王二&#x27;),(3,&#x27;王五&#x27;),(4,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 查询多个字段</span><br><span class="line">select id from student;</span><br><span class="line"></span><br><span class="line">-- 查询所有</span><br><span class="line">select * from student;</span><br><span class="line"></span><br><span class="line">-- 查询所有</span><br><span class="line">select id as &#x27;学号&#x27; ,stu_name as &#x27;姓名&#x27; from student;</span><br></pre></td></tr></table></figure><h3 id="列-字段-起别名和参与数学运算"><a href="#列-字段-起别名和参与数学运算" class="headerlink" title="列(字段)起别名和参与数学运算"></a>列(字段)起别名和参与数学运算</h3><div class="table-container"><table><thead><tr><th>列(字段)起别名</th><th>select 字段名 as 新名字 from 表名; 注意：as只作用于左边那一个字段。as可以用空格代替;起的别名有空格，要用单引号。别名是中文要用单引号括起来；新版已经不需要括起来了。</th></tr></thead><tbody><tr><td>字段(列)参与数学运算</td><td>例如：select 字段名*12 from 表名; //注意：只作用于那次查询，不会对源数据修改。//结论：字段可以使用数学表达式！</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;王二&#x27;),(3,&#x27;王五&#x27;),(4,&#x27;张三&#x27;);</span><br><span class="line"></span><br><span class="line">-- 示例</span><br><span class="line">select id*20 from student;</span><br></pre></td></tr></table></figure><p><img src="http://cdn.staro.cc/blog/posts/2212/20221206163933.png" alt="结果"></p><h3 id="条件查询和多字段排序"><a href="#条件查询和多字段排序" class="headerlink" title="条件查询和多字段排序"></a>条件查询和多字段排序</h3><div class="table-container"><table><thead><tr><th>条件查询</th><th>select 字段n from 表名 where 条件; 注意条件有： = , !=,&lt;&gt; , &lt; , &lt;= , &gt; , &gt;= , between…and\等同于&lt;=and&lt;= , is null\is not null , and , or , in , not , like</th></tr></thead><tbody><tr><td>多个字段排序</td><td>select 字段名 from 表名 order by 要排序的字段名 排序方式 , 要排序的字段名 排序方式; 注意：排序字段名在前，起主导，只有前面的相等的时候，才会考虑启用后面的排序</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 多个字段排序 </span><br><span class="line">select * from student order by id desc,age asc;</span><br><span class="line">-- between…and</span><br><span class="line">select * from student where age between 20 and 22;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">=</td><td style="text-align:center">等于</td></tr><tr><td style="text-align:center">!=，&lt;&gt;</td><td style="text-align:center">都是不等于</td></tr><tr><td style="text-align:center">&gt;，&gt;=</td><td style="text-align:center">大于，大于等于</td></tr><tr><td style="text-align:center">&lt;，&lt;=</td><td style="text-align:center">小于,小于等于</td></tr><tr><td style="text-align:center">between…and</td><td style="text-align:center">相当于a&lt;=and&lt;=b(select * from student where age between 20 and 22)</td></tr><tr><td style="text-align:center">is null</td><td style="text-align:center">值为null（空）</td></tr><tr><td style="text-align:center">is not null</td><td style="text-align:center">值不为null（空）</td></tr><tr><td style="text-align:center">and</td><td style="text-align:center">逻辑运算符，两边为true结果为true</td></tr><tr><td style="text-align:center">or</td><td style="text-align:center">逻辑运算符，一边为true结果为true</td></tr><tr><td style="text-align:center">in</td><td style="text-align:center">包含(select * from student where age in (20,21,22))</td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">取反，可以配合着用(not in, not between 1 and 2, not link ‘%1%’ ，is not null等 )</td></tr><tr><td style="text-align:center">like</td><td style="text-align:center">模糊匹配(select * from student where stu_name like ‘张%’)</td></tr></tbody></table></div><h3 id="insert-插入数据"><a href="#insert-插入数据" class="headerlink" title="insert 插入数据"></a>insert 插入数据</h3><div class="table-container"><table><thead><tr><th>insert 插入数据</th><th>insert into 表名(字段名1,字段名2,字段名3…) values(值1,值2,值3);注意：字段名和值要一一对应。什么是一一对应？数量要对应。数据类型要对应。//注意：除了数字，其他都要加单引号</th></tr></thead><tbody><tr><td>insert 插入多条数据</td><td>语法：insert into 表名(字段名1,字段名2) values(),(),(),();</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="update修改数据"><a href="#update修改数据" class="headerlink" title="update修改数据"></a>update修改数据</h3><div class="table-container"><table><thead><tr><th>update修改数据</th><th>update 表名 set 字段名1=值1,字段名2=值2,字段名3=值3… where 条件;注意：没有条件限制会导致所有数据全部更新。</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">-- 修改数据</span><br><span class="line">update student set age=20 where id = 1;</span><br></pre></td></tr></table></figure><h3 id="delete删除数据"><a href="#delete删除数据" class="headerlink" title="delete删除数据"></a>delete删除数据</h3><div class="table-container"><table><thead><tr><th>delete删除数据</th><th>delete from 表名 where 条件;注意：没有条件，整张表的数据会全部删除！</th></tr></thead><tbody><tr><td>快速删除表中的数据</td><td>truncate table 表名;</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;,</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 ;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">-- 删除数据</span><br><span class="line">delete from student where id = 1;</span><br></pre></td></tr></table></figure><h3 id="约束相关命令"><a href="#约束相关命令" class="headerlink" title="约束相关命令"></a>约束相关命令</h3><div class="table-container"><table><thead><tr><th>非空约束</th><th>not null</th></tr></thead><tbody><tr><td>唯一性约束</td><td>unique</td></tr><tr><td>主键约束（主键值：是当前行数据的唯一标识、是当前行数据的身份证号）</td><td>primary key （简称PK）</td></tr><tr><td>外键约束（外键约束主要用来维护两个表之间数据的一致性。）</td><td>foreign key（简称FK）</td></tr></tbody></table></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 生成数据</span><br><span class="line">drop database if exists school;</span><br><span class="line">create database school charset=utf8mb4;</span><br><span class="line">use school;</span><br><span class="line">create table student(</span><br><span class="line">    -- 指定主键约束 给某个字段添加主键约束之后，该字段不能重复也不能为空</span><br><span class="line">id int(10) primary key comment &#x27;学号&#x27;, </span><br><span class="line">    -- 非空约束 用not null约束的字段不能为null值，必须给定具体的数据</span><br><span class="line">stu_name varchar(10) not null comment &#x27;学生姓名&#x27;, </span><br><span class="line">    -- 唯一约束 unique约束的字段，具有唯一性，不可重复，但可以为null</span><br><span class="line">    card varchar(18) unique comment &#x27;身份证&#x27;, </span><br><span class="line">    age int(10) comment &#x27;年龄&#x27;，</span><br><span class="line">    c_id int(10) primary key comment &#x27;班号&#x27;, </span><br><span class="line">    -- 外键：foreign key(当前表字段) references 被引用的外键表(被引用的外键表的字段)</span><br><span class="line">    foreign key(c_id) references t_class(c_id)</span><br><span class="line">)engine=innodb default charset=utf8mb4 comment &#x27;学生表&#x27;;</span><br><span class="line">insert into student values(1,&#x27;张三&#x27;,20),(2,&#x27;王二&#x27;,21),(3,&#x27;王五&#x27;,22),(4,&#x27;张三&#x27;,23);</span><br><span class="line"></span><br><span class="line">create table class(</span><br><span class="line">c_id int(10) primary key comment &#x27;班号&#x27;, </span><br><span class="line">c_name varchar(10) not null comment &#x27;班级名称&#x27;</span><br><span class="line">)engine=innodb default charset=utf8mb4 comment &#x27;班级表&#x27;;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul><li>外键值可以为null</li><li>外键字段去引用一张表的某个字段的时候，被引用的字段必须具有unique约束</li><li>有了外键引用之后，表分为父表和子表<ul><li>班级表：父表</li><li>学生表：子表</li></ul></li><li>创建先创建父表</li><li>删除先删除子表数据</li><li>插入先插入父表数据</li></ul><h3 id="单行处理函数相关命令"><a href="#单行处理函数相关命令" class="headerlink" title="单行处理函数相关命令"></a>单行处理函数相关命令</h3><div class="table-container"><table><thead><tr><th>单行处理函数</th><th>使用方法 也可以用在where条件里面</th></tr></thead><tbody><tr><td>lower 转换成小写</td><td>select lower(字段名) from 表名;</td></tr><tr><td>upper 转换成大写</td><td>select upper(字段名) from 表名;</td></tr><tr><td>substr 取子串</td><td>select substr(被截取的字符串 ,起始下标,截取长度) from 表名 ;//注意：起始下标从1开始。</td></tr><tr><td>concat 字符串拼接</td><td>select concat(字段名,字段名) from 表名;</td></tr><tr><td>length 获取长度</td><td>select length(字段名) from 表名;</td></tr><tr><td>format 设置千分位</td><td>format(数字, ‘格式’) 例如:select ename,format(sal, ‘$999,999’) as sal from emp;</td></tr><tr><td>round 四舍五入</td><td>ect round(字段名,0) from 表名; //可以不写字段名写数字，那么它就对这个数字进行四舍五入，而且还是借助表名的结构输出。后面是0表示保留一位小数，2表示保留两位小数，-1表示保留到十位，-2保留到百位依次后推。</td></tr><tr><td>rand 生成随机数</td><td>select round() from 表名; //生成随机数</td></tr><tr><td>100以内的随机数</td><td>select round(rand()*100,0);</td></tr><tr><td>ifnull() 将null转为具体的值。只要有null参与的数学运算，结果一定是null</td><td>ifnull(数据,被当做哪个值) 如果数据为null，把这个数据当做哪个值。</td></tr></tbody></table></div><h3 id="多行处理函数（分组函数）相关命令"><a href="#多行处理函数（分组函数）相关命令" class="headerlink" title="多行处理函数（分组函数）相关命令"></a>多行处理函数（分组函数）相关命令</h3><div class="table-container"><table><thead><tr><th>多行处理函数(分组函数)</th><th>也就是说一列数据 输出一个值。</th></tr></thead><tbody><tr><td>sun 求和</td><td>select sun(字段) from 表名; //输出这个字段的和</td></tr><tr><td>max 最大值</td><td>select max(字段) from 表名; //输出这个字段的最大值</td></tr><tr><td>min 最小值</td><td>select min(字段) from 表名; //输出这个字段的最小值</td></tr><tr><td>avg 平均值</td><td>select avg(字段) from 表名; //输出这个字段的平均值</td></tr><tr><td>count 计数</td><td>select count(字段) from 表名; //输出这个字段的数据(也就是有多少行)的数量</td></tr></tbody></table></div><h3 id="分组查询等相关命令"><a href="#分组查询等相关命令" class="headerlink" title="分组查询等相关命令"></a>分组查询等相关命令</h3><div class="table-container"><table><thead><tr><th>分组查询</th><th>select 字段… from 表名 group by 要分组的字段; //在一条select语句当中，如果有group by语句的话，select后面只能跟：参加分组的字段，以及分组函数。其它的一律不能跟。</th></tr></thead><tbody><tr><td>联合分组查询</td><td>select 字段… from 表名 group by 要分组的字段1,字段2; //两个字段联合成1个字段看。（两个字段联合分组）</td></tr><tr><td>having 分组后再过滤</td><td>使用having可以对分完组之后的数据进一步过滤。having不能单独使用，having不能代替where，having必须和group by联合使用。优化策略：where和having，优先选择where，where实在完成不了了，再选择having。having 是跟 group by后面用的，可以用分组函数。where后面可不能用。例如：select deptno,avg(sal) from emp group by deptno having avg(sal) &gt; 2500;</td></tr><tr><td>distinct去重</td><td>distinct只能出现在所有字段的最前方distinct出现在job,deptno两个字段之前，表示两个字段联合起来去重。例如:select distinct job from emp;select distinct job,deptno from emp;错误写法： select ename,distinct job from emp; distinct只能出现在所有字段的最前方</td></tr></tbody></table></div><h3 id="连接查询，多表联查等相关命令"><a href="#连接查询，多表联查等相关命令" class="headerlink" title="连接查询，多表联查等相关命令"></a>连接查询，多表联查等相关命令</h3><div class="table-container"><table><thead><tr><th>连接查询 内连接</th><th>select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno; //join连接的意思 ，on是连接条件</th></tr></thead><tbody><tr><td>连接查询 外连接</td><td>select e.ename,d.dname from dept d left join emp e on e.deptno = d.deptno; //left 是join左边的表是主表。right代表什么：表示将join关键字右边的这张表看成主表，主要是为了将这张表的数据全部查询出来，捎带着关联查询左边的表。在外连接当中，两张表连接，产生了主次关系。</td></tr><tr><td>多表联查</td><td>语法：select … from a join b on a和b的连接条件 join c on a和c的连接条件 right join d on a和d的连接条件；//一条SQL中内连接和外连接可以混合。都可以出现！</td></tr><tr><td>union合并查询结果集</td><td>例如：select ename,job from emp where job = ‘MANAGER’ union select ename,job from emp where job = ‘SALESMAN’; //要求：结果集合并时列和列的数据类型也要一致。</td></tr><tr><td>limit取出部分数据</td><td>完整用法：limit startIndex, length; // startIndex是起始下标，length是长度。起始下标从0开始。缺省用法：limit 5; 这是取前5。例如：select ename,sal from emp order by sal desc limit 2, 3;</td></tr><tr><td>通用分页查询公式</td><td>limit (pageNo-1)*pageSize , pageSize //pagNo是第多少页 pageSize是每行显示多少条数据</td></tr></tbody></table></div><h3 id="事务相关的命令"><a href="#事务相关的命令" class="headerlink" title="事务相关的命令"></a>事务相关的命令</h3><div class="table-container"><table><thead><tr><th>关闭自动提交事务</th><th>start transaction</th></tr></thead><tbody><tr><td>提交事务</td><td>commit</td></tr><tr><td>事务回滚</td><td>rollback</td></tr><tr><td>查看隔离级别</td><td>SELECT @@tx_isolation //注意：新版mysql 应该换语句了</td></tr><tr><td>修改隔离级别</td><td>set global transaction isolation level 级别名;</td></tr></tbody></table></div><h3 id="索引创建与删除"><a href="#索引创建与删除" class="headerlink" title="索引创建与删除"></a>索引创建与删除</h3><div class="table-container"><table><thead><tr><th>索引的创建</th><th>例：create index emp_ename_index on emp(ename);// 给emp表的ename字段添加索引，起名：emp_ename_index</th></tr></thead><tbody><tr><td>索引的删除</td><td>例：drop index emp_ename_index on emp;//将emp表上的emp_ename_index索引对象删除。</td></tr><tr><td>查看一个SQL语句是否使用了索引进行检索</td><td>explain select * from emp where ename = ‘KING’;//在sql语句前面添加explain</td></tr></tbody></table></div><h3 id="视图对象的创建与删除"><a href="#视图对象的创建与删除" class="headerlink" title="视图对象的创建与删除"></a>视图对象的创建与删除</h3><div class="table-container"><table><thead><tr><th>创建视图对象</th><th>create view 视图对象的名字 as select * from 表名;</th></tr></thead><tbody><tr><td>删除视图对象</td><td>drop view 视图对象的名字;</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> SQL笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode Markdown 自定义代码片段</title>
      <link href="/post/1199d4f7.html"/>
      <url>/post/1199d4f7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在写博客的时候，觉得如果每一篇博客都要写头顶上的title,date…. 等信息的话会很繁琐,想到vscode 有自定义的代码缩写功能，在网上找了一下决定记录一下。</p></blockquote><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>快速构建一些繁琐且具有一定常用性的语句</li></ul><h1 id="自定义代码片段"><a href="#自定义代码片段" class="headerlink" title="自定义代码片段"></a>自定义代码片段</h1><p>打开文件-&gt;首选项-&gt;配置用户代码片段(点击)<br><details class="folding-tag" ><summary> 图示 </summary>              <div class='content'>              <p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163710.png" alt="打开代码片段"></p>              </div>            </details></p><p>选择Markdwon.json 或者 搜索 Markdwon.json<br>或者选择新建全局代码片段文件(最好选择Markdwon.json)</p><details class="folding-tag" ><summary> 图示 </summary>              <div class='content'>              <p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163725.png" alt="打开代码片段"></p>              </div>            </details><div class="table-container"><table><thead><tr><th>代码</th><th>示意</th></tr></thead><tbody><tr><td>scope</td><td>字段中填写以逗号分隔的作用域 Id，如果 scope 字段为空或根本没有设置，那么将适用于所有语言。(如果选择的是Markdown.json的话不用写这个)</td></tr><tr><td>prefix</td><td>是用于触发代码片段的一段文字，当你输入这个文字的时候，你将可以展开这个代码片段的内容并将其插入。</td></tr><tr><td>body</td><td>你可以使用 $1 $2 来作为按下 Tab 时将切换的键盘焦点区域，$0 是插入完成后最终光标所在的位置。你也可以使用 ${1:label} 或 ${2:another} 这样的方式来增加占位符，同样 Id 的占位符将会自动关联起来。</td></tr><tr><td>description</td><td>代码解释，没多少用，但是写着方便以后查看</td></tr></tbody></table></div><details class="folding-tag" ><summary> 代码与图示 </summary>              <div class='content'>              <div class="tabs" id="代码与图示"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#代码与图示-1">代码</button></li><li class="tab"><button type="button" data-href="#代码与图示-2">图示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="代码与图示-1"><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;blog header info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;---&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;title: \&quot;$&#123;1:在此处添加标题&#125;\&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;date: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;updated: $&#123;CURRENT_YEAR&#125;-$&#123;CURRENT_MONTH&#125;-$&#123;CURRENT_DATE&#125; $&#123;CURRENT_HOUR&#125;:$&#123;CURRENT_MINUTE&#125;:$&#123;CURRENT_SECOND&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;copyright_author: Star &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;copyright_url:  &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;description: $&#123;2:笔记描述&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;categories: $&#123;3|后端笔记,前端笔记,SQL笔记,工具笔记,算法笔记,计算机笔记,其他笔记|&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;tags: $&#123;4|JAVA,Mysql,Springboot,Linux,计算机基础,算法|&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;---&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;0:在此处编辑  的博客摘要&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;markdown 头部信息模版&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="代码与图示-2"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163739.png" alt="代码解释图"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="打开Markdown自定义补全功能"><a href="#打开Markdown自定义补全功能" class="headerlink" title="打开Markdown自定义补全功能"></a>打开Markdown自定义补全功能</h1><p>文件-&gt;首选项-&gt;设置-&gt;(右上角)打开设置，将下面这段设置写入setting.json文件</p><details class="folding-tag" ><summary> 自定义补全代码与步骤示图 </summary>              <div class='content'>              <div class="tabs" id="tabs2"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tabs2-1">代码</button></li><li class="tab"><button type="button" data-href="#tabs2-2">图示1</button></li><li class="tab"><button type="button" data-href="#tabs2-3">图示2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tabs2-1"><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-2"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163754.png" alt="图示1"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tabs2-3"><p><img src="https://cdn.staro.cc/blog/posts/2212/20221206163805.png" alt="图示2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h1 id="关于代码片段编写的更多细节"><a href="#关于代码片段编写的更多细节" class="headerlink" title="关于代码片段编写的更多细节"></a>关于代码片段编写的更多细节</h1><h2 id="关于文件名称"><a href="#关于文件名称" class="headerlink" title="关于文件名称"></a>关于文件名称</h2><p>在阅读前面的博客内容时，你可能注意到了：添加全局代码片段的时候，文件扩展名为 .code-snippets，例如 blog.code-snippets；添加语言特定的代码片段的时候，扩展名为 .json，如 markdown.json。这个规则无论在全局还是在工作区，都是一样适用的。</p><h2 id="光标停留点（Tabstop）"><a href="#光标停留点（Tabstop）" class="headerlink" title="光标停留点（Tabstop）"></a>光标停留点（Tabstop）</h2><details class="folding-tag" ><summary> 光标停留点 </summary>              <div class='content'>              <p>使用 $1 $2 这些可以作为按下 Tab 键时的光标停留位置，而 $0 无论出现在代码片段的哪个地方，都会是最后一个光标位置。</p>              </div>            </details><h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><details class="folding-tag" ><summary> 占位符 </summary>              <div class='content'>              <p>${1:占位符 Id} 可以表示一个占位符。当你插入此代码片段的时候，会出现 占位符 Id 字样，然后光标会选中这几个字以便你进行修改。</p><p>占位符可以嵌套，例如 ${1:walterlv 的 ${2:嵌套占位符}}。这时，光标会首先选中所有的文字，随后按下 Tab 之后选中后面那一部分。</p><p>在前面那个比较复杂的博客代码片段中，${1:在此处添加标题} 就是一个占位符，而 ${0:在此处编辑 blog.walterlv.com 的博客摘要} 就是光标的最终停留点。</p>              </div>            </details><h2 id="下拉选项"><a href="#下拉选项" class="headerlink" title="下拉选项"></a>下拉选项</h2><details class="folding-tag" ><summary> 下拉选项 </summary>              <div class='content'>              <p>使用 ${1|选项 1,选项 2,选项 3|} 可以创建三个选项的下拉框。</p><p>在前面的博客代码片段中，${2|dotnet,csharp,uwp|} 就是一个下拉选框，帮助我选择常用的一些博客类别。</p>              </div>            </details><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><details class="folding-tag" ><summary> 变量 </summary>              <div class='content'>              <p>使用 $变量名 或者 ${变量名:变量的默认值} 可以创建变量。</p><p>在 Visual Studio Code 中，你有这些变量可以使用：</p><p>-TM_SELECTED_TEXT - 在插入代码片段的时刻选中的文本 -TM_CURRENT_LINE - 在插入代码片段的时刻光标所在的行 -TM_CURRENT_WORD - 在插入代码片段的时刻光标所在的词 -TM_LINE_INDEX - 在插入代码片段的时刻的行号（0 为首行） -TM_LINE_NUMBER - 当前文档的总行数 -TM_FILENAME - 当前文档的文件名称 -TM_FILENAME_BASE - 当前文档不含扩展名的名称 -TM_DIRECTORY - 当前文档所在的文件夹 -TM_FILEPATH - 当前文档的完全路径 -CLIPBOARD - 剪贴板中的内容 -CURRENT_YEAR - 年 -CURRENT_YEAR_SHORT - 两位数字显示的年 -CURRENT_MONTH - 月，如 02 -CURRENT_MONTH_NAME - 月的英文名称，如 July -CURRENT_MONTH_NAME_SHORT - 月的英文缩写，如 Jul -CURRENT_DATE - 日 -CURRENT_DAY_NAME - 星期的英文名称，如 Monday -CURRENT_DAY_NAME_SHORT - 星期的英文缩写，如 Mon -CURRENT_HOUR - 24 小时制的时 -CURRENT_MINUTE - 分 -CURRENT_SECOND - 秒</p><p>所以在上面比较复杂的博客模板中，我们可以直接插入当前的时间 ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} +0800。</p>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 工具笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/post/5c2fafc7.html"/>
      <url>/post/5c2fafc7.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题一"><a href="#标题一" class="headerlink" title="标题一"></a>标题一</h1><u>文本内容</u><emp>文本内容</emp><wavy>文本内容</wavy><del>文本内容</del><kbd>文本内容</kbd><psw>文本内容</psw><details class="folding-tag" ><summary> 测试 </summary>              <div class='content'>              <div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>              </div>            </details><h2 id="标题二"><a href="#标题二" class="headerlink" title="标题二"></a>标题二</h2>]]></content>
      
      
      <categories>
          
          <category> 后端笔记 </category>
          
          <category> SQL笔记 </category>
          
          <category> 工具笔记 </category>
          
          <category> 前端笔记 </category>
          
          <category> 其他笔记 </category>
          
          <category> 算法笔记 </category>
          
          <category> 计算机笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Springboot </tag>
            
            <tag> 计算机基础 </tag>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
